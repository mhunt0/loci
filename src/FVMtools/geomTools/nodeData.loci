//#############################################################################
//#
//# Copyright 2015, Mississippi State University
//#
//# This file is part of the Loci Framework.
//#
//# The Loci Framework is free software: you can redistribute it and/or modify
//# it under the terms of the Lesser GNU General Public License as published by
//# the Free Software Foundation, either version 3 of the License, or
//# (at your option) any later version.
//#
//# The Loci Framework is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# Lesser GNU General Public License for more details.
//#
//# You should have received a copy of the Lesser GNU General Public License
//# along with the Loci Framework.  If not, see <http://www.gnu.org/licenses>
//#
//#############################################################################
#include <iostream>
using std::endl;
using std::ostream;
using std::cout ;
#include <string>
using std::string;
#include <Loci.h>
using Loci::option_value_type;
#include "gridMotion/gridTypes.h"
#include "gridMotion/nodeData.h"
using gridMotion::NodeData;
#include "gridMotion/rotor.h"
using gridMotion::Rotor;
#include "gridMotionTraits.h"

$include "FVM.lh"

typedef Loci::real_t real ;
typedef Loci::vector3d<Loci::real_t> vect3d ;

// Input displacement
$type nodeDisp_b                        store<vect3d>;
// Input displacement with constraints applied
$type nodeDisp_bc                        store<vect3d>; 


namespace {
    void get_vect3dOption(const options_list &ol,std::string vname,
                        std::string units, vect3d &vec, real scale) {
    Loci::option_value_type ovt= ol.getOptionValueType(vname) ;
    if(ovt == Loci::REAL) {
      double v ;
      ol.getOption(vname,v) ;
      vec = vect3d(v*scale,0,0) ;
    } else if(ol.getOptionValueType(vname) == Loci::UNIT_VALUE) {
      Loci::UNIT_type vu ;
      ol.getOption(vname,vu) ;
      if(!vu.is_compatible(units)) {
        std::cerr << "wrong type of units for vector " << vname
                  << ": " << vu << std::endl ;
        Loci::Abort() ;
      } else {
        double v ;
        v = vu.get_value_in(units) ;
        vec = vect3d(v,0,0) ;
      }
    } else if(ovt == Loci::LIST) {
      Loci::options_list::arg_list value_list ;
      ol.getOption(vname,value_list) ;
      if(value_list.size() != 3) {
        std::cerr << "error on reading '" << vname
                  <<"': vector input must contain 3 terms"
                  << std::endl ;
        Loci::Abort() ;
      }
      for(int i=0;i<3;++i)
        if(value_list[i].type_of() != Loci::REAL &&
           value_list[i].type_of() != Loci::UNIT_VALUE) {
          std::cerr << "improper vector specification for '"
                    << vname << std::endl ;
          Loci::Abort() ;
        }
      double vecval[3] ;
      for(int i=0;i<3;++i) {
        if(value_list[i].type_of() == Loci::UNIT_VALUE) {
          Loci::UNIT_type vu ;
          value_list[i].get_value(vu) ;
          if(!vu.is_compatible(units)) {
            std::cerr << "wrong type of units for vector " << vname
                      << ": " << vu << std::endl ;
            Loci::Abort() ;
          }
          vecval[i] = vu.get_value_in(units) ;
        } else {
          value_list[i].get_value(vecval[i]) ;
          vecval[i] *= scale ;
        }
      }
      vec.x = vecval[0] ;
      vec.y = vecval[1] ;
      vec.z = vecval[2] ;
    } else if(ovt == Loci::FUNCTION) {
      string name ;
      Loci::options_list::arg_list value_list ;
      ol.getOption(vname,name,value_list) ;
      if(name != "polar") {
        std::cerr << "don't know coordinate function '" << name
                  <<"', defaulting to polar" << std::endl ;
        Loci::Abort() ;
      }
      if(value_list.size() != 3) {
        std::cerr << "error on reading '"
                  << vname << "': vector input must contain 3 terms"
                  << std::endl ;
        Loci::Abort() ;
      }
      for(int i=0;i<3;++i)
        if(value_list[i].type_of() != Loci::REAL &&
           value_list[i].type_of() != Loci::UNIT_VALUE) {
          std::cerr << "improper vector specification for '"
                    << vname << std::endl ;
          Loci::Abort() ;
        }
      real r=1 ,theta=0 ,eta=0 ;
      real conv = M_PI/180.0 ;
      if(value_list[0].type_of() == Loci::UNIT_VALUE) {
        Loci::UNIT_type vu ;
        value_list[0].get_value(vu) ;
        if(!vu.is_compatible(units)) {
          std::cerr << "wrong type of units for vector " << vname
                    << ": " << vu << std::endl ;
          Loci::Abort() ;
        }
        r = vu.get_value_in(units) ;
      } else {
        value_list[0].get_value(r) ;
        r *= scale ;
      }
      if(value_list[1].type_of() == Loci::UNIT_VALUE) {
        Loci::UNIT_type vu ;
        value_list[1].get_value(vu) ;
        if(!vu.is_compatible("radians")) {
          std::cerr << "wrong type of units for vector " << vname
                    << ": " << vu << std::endl ;
          Loci::Abort() ;
        }
        theta = vu.get_value_in("radians") ;
      } else {
        value_list[1].get_value(theta) ;
        theta *= conv  ;
      }
      if(value_list[2].type_of() == Loci::UNIT_VALUE) {
        Loci::UNIT_type vu ;
        value_list[2].get_value(vu) ;
        if(!vu.is_compatible("radians")) {
          std::cerr << "wrong type of units for vector " << vname
                    << ": " << vu << std::endl ;
          Loci::Abort() ;
        }
        eta = vu.get_value_in("radians") ;
      } else {
        value_list[2].get_value(eta) ;
        eta *= conv  ;
      }

      vec.x = r*cos(theta)*cos(eta) ;
      vec.y = r*sin(theta)*cos(eta) ;
      vec.z = r*sin(eta) ;
    } else {
      std::cerr << "unable to get vector type!" << std::endl ;
      Loci::Abort() ;
    }
  }

}
//--------------------------------------------------------------------
$type participatingFaces                store<bool> ;
//--------------------------------------------------------------------
$rule pointwise(participatingFaces),
  constraint(ref->moving_BCoption) {
  $participatingFaces = true ;
}
$rule pointwise(participatingFaces),
  constraint(geometry_BC) {
  $participatingFaces = true ;
}

//--------------------------------------------------------------------
$rule pointwise(fixed::participatingFaces),
  constraint(ref->fixed_BCoption) {
  $participatingFaces = true ;
}
//--------------------------------------------------------------------
$rule pointwise(participatingFaces),
  constraint(ref->constrainedMotion_BCoption) {
  $participatingFaces = true ;
}

//--------------------------------------------------------------------
$type participatingArea                 param<real> ;
//--------------------------------------------------------------------
$rule unit(participatingArea),
                   constraint(UNIVERSE) {
  $participatingArea = 0 ;
                   }
//--------------------------------------------------------------------
$rule apply(participatingArea<-area)[Loci::Summation],
  constraint(participatingFaces) {
  join($participatingArea,$area.sada) ;
  }

//--------------------------------------------------------------------
$type farfieldDeformArea                param<real> ;
//--------------------------------------------------------------------
$rule unit(farfieldDeformArea),
  constraint(UNIVERSE) {
  $farfieldDeformArea = 0 ;
  }
//--------------------------------------------------------------------
$rule apply(farfieldDeformArea<-area)[Loci::Summation],
  constraint(ref->farfieldDeform_BCoption) {
  join($farfieldDeformArea,$area.sada) ;
}

//--------------------------------------------------------------------
$type surfaceDeformWeight               store<real> ;
//--------------------------------------------------------------------
$rule pointwise(surfaceDeformWeight<-BC_options) {
  $surfaceDeformWeight = 1.0 ;
  if ( $BC_options.optionExists("deformWeight") ) {
    option_value_type ovt = 
      $BC_options.getOptionValueType("deformWeight");
    if (ovt == Loci::REAL) {
      $BC_options.getOption("deformWeight", $surfaceDeformWeight);
    }
  }
}
//--------------------------------------------------------------------
$rule pointwise(farfield::surfaceDeformWeight<-BC_options,
                participatingArea,farfieldDeformArea),
  constraint(farfieldDeform_BCoption) {
  $surfaceDeformWeight = 1.0 ;
  if ( $BC_options.optionExists("deformWeight") ) {
    option_value_type ovt = 
      $BC_options.getOptionValueType("deformWeight");
    if (ovt == Loci::REAL) {
      $BC_options.getOption("deformWeight", $surfaceDeformWeight);
    }
  }
  $surfaceDeformWeight *= 2.*($participatingArea-$farfieldDeformArea)/$farfieldDeformArea ;
  }

$type surfaceTotalWeight store<double> ;

$rule unit(surfaceTotalWeight),constraint(UNIVERSE) {
  $surfaceTotalWeight = 0 ;
}

$rule apply(ref->surfaceTotalWeight<-area,ref->surfaceDeformWeight)[Loci::Summation] {
  join($ref->$surfaceTotalWeight,$area.sada*$ref->$surfaceDeformWeight) ;
}

$type surfaceMotionConstraint store<gridMotion::constraintData> ;
$type boundary_tags store<std::string> ;
$rule pointwise(surfaceMotionConstraint<-BC_options,surfaceTotalWeight,boundary_tags),constraint(constrainedMotion_BCoption) {
  gridMotion::constraintData data ;
  data.constraintType = -1 ;
  data.v1 = gridMotion::vect3d(0,0,0) ;
  data.v2 = data.v1 ;
  data.r = 0 ;
  data.weight = $surfaceTotalWeight ;
  string tag = $boundary_tags ;
  int num = 1 ;
  int dec = 1 ;
  for(size_t i=0;i<tag.size();++i) {
    if(tag[i] >= '0' && tag[i] <= '9') {
      num += dec*int(tag[i]-'0') ;
      dec *= 10 ;
    }
  }
  data.id = num ;

  Loci::option_value_type ovt =
    $BC_options.getOptionValueType("constrainedMotion") ;
  if(ovt == Loci::FUNCTION) {
    string name ;
    Loci::options_list::arg_list value_list ;
    $BC_options.getOption("constrainedMotion",name,value_list) ;
    options_list fol ;
    fol.Input(value_list) ;
    if(name == "cylinder") {
      vect3d p1(1,0,0) ;
      vect3d p2(0,0,0) ;
      double r = 1 ;
      get_vect3dOption(fol,"p1","m",p1,1) ;
      get_vect3dOption(fol,"p2","m",p2,1) ;
      ovt = fol.getOptionValueType("radius") ;
      if(ovt == Loci::REAL) {
        fol.getOption("radius",r) ;
      } else if(ovt == Loci::UNIT_VALUE) {
        Loci::UNIT_type vu ;
        fol.getOption("radius",vu) ;
        if(!vu.is_compatible("m")) {
          cerr << "wrong type of units for radius" << endl ;
          Loci::Abort() ;
        }
        r = vu.get_value_in("m") ;
      }
      data.constraintType = C_CYLINDER ;
      data.v1 = to_gridMotion(p1) ;
      data.v2 = to_gridMotion(p2) ;
      data.r = r ;
    } else if(name == "plane") {
      vect3d p1(1,0,0) ;
      vect3d p2(0,0,0) ;
      double r = 1e30 ;
      get_vect3dOption(fol,"normal","",p1,1) ;
      p1 *= 1./(norm(p1)+1e-30) ;
      get_vect3dOption(fol,"point","m",p2,1) ;
      data.constraintType = C_PLANE ;
      data.v1 = to_gridMotion(p1) ;
      data.v2 = to_gridMotion(p2) ;
      data.r = r ;
    } else if(name == "disc") {
      vect3d p1(1,0,0) ;
      vect3d p2(0,0,0) ;
      double r = 1 ;
      get_vect3dOption(fol,"normal","",p1,1) ;
      p1 *= 1./(norm(p1)+1e-30) ;
      get_vect3dOption(fol,"point","m",p2,1) ;
      ovt = fol.getOptionValueType("radius") ;
      if(ovt == Loci::REAL) {
        fol.getOption("radius",r) ;
      } else if(ovt == Loci::UNIT_VALUE) {
        Loci::UNIT_type vu ;
        fol.getOption("radius",vu) ;
        if(!vu.is_compatible("m")) {
          cerr << "wrong type of units for radius" << endl ;
          Loci::Abort() ;
        }
        r = vu.get_value_in("m") ;
      }
      data.constraintType = C_DISC ;
      data.v1 = to_gridMotion(p1) ;
      data.v2 = to_gridMotion(p2) ;
      data.r = r ;
    } else {
      cerr << "invalid constrainedMotion type" << endl ;
      Loci::Abort() ;
    }
  } else {
    cerr << "invalid constrainedMotion type" << endl ;
    Loci::Abort() ;
  }
  $surfaceMotionConstraint = data ;
    
}

$type surfaceMotionConstraintIdNode store<int> ;

$rule pointwise(face2node->surfaceMotionConstraintIdNode<-ref->surfaceMotionConstraint) {
  int fsz = $face2node.size() ;
  for(int i=0;i<fsz;++i)
    $face2node[i]->$surfaceMotionConstraintIdNode = ($ref->$surfaceMotionConstraint).id ;
}

$type constraintBoundaryNodes param<std::vector<std::pair<vect3d,vect3d> > > ;

$rule unit(constraintBoundaryNodes),constraint(UNIVERSE) {
  $constraintBoundaryNodes = std::vector<std::pair<vect3d,vect3d> >() ;
}

$rule apply(constraintBoundaryNodes<-pos,nodeDisp_b)[gridMotion::Append],constraint(prescribedMotionNodes,constrainedBoundaryNodes) {
  pair<vect3d,vect3d> p($pos,$nodeDisp_b) ;
  $constraintBoundaryNodes.push_back(p) ;
}

$type motionConstraintList param<std::vector<gridMotion::constraintData> > ;

$rule unit(motionConstraintList),constraint(UNIVERSE) {
  $motionConstraintList = std::vector<gridMotion::constraintData>() ;
}

$rule apply(motionConstraintList)[gridMotion::Append],constraint(BC_options),
  prelude {
} ;
$rule apply(motionConstraintList<-surfaceMotionConstraint)[gridMotion::Append] {
  $motionConstraintList.push_back($surfaceMotionConstraint) ;
}

//------------------------------------------------------------------
// Area weight that we will probably use in the IDW algorithm so
// that displacments are not overly biased towards boundaries with
// relatively high concentrations of mesh nodes.
//------------------------------------------------------------------
$type nodeAreaWeight                    store<real>;
//------------------------------------------------------------------
$rule unit( nodeAreaWeight ),
  constraint( boundaryNodes ) {
  $nodeAreaWeight = 0.0;
  }
//------------------------------------------------------------------
$rule apply( face2node->nodeAreaWeight <- ref->surfaceDeformWeight,
             area, face2node )[Loci::Summation],
  constraint( participatingFaces ) {
  const int N = $face2node.size();
  const double weight = ($ref->$surfaceDeformWeight)*$area.sada/N;
  for (int i=0; i<N; ++i) {
    $face2node[i]->$nodeAreaWeight += weight;
  }
  }

//--------------------------------------------------------------------
$type totalMovingNodeAreaWeight         param<real>;
//--------------------------------------------------------------------
$rule unit( totalMovingNodeAreaWeight ),
  constraint( UNIVERSE ) {
  $totalMovingNodeAreaWeight = 0.0;
  }
//--------------------------------------------------------------------
$rule apply( totalMovingNodeAreaWeight <-
             nodeAreaWeight )[Loci::Summation],
  constraint( movingBoundaryNodes ) {
  $totalMovingNodeAreaWeight += $nodeAreaWeight;
  }

//------------------------------------------------------------------
$type participatingBoundaryArea         param<real>;
//------------------------------------------------------------------
$rule unit( participatingBoundaryArea ),
  constraint( UNIVERSE ) {
  $participatingBoundaryArea = 0;
  }
//------------------------------------------------------------------
$rule apply( participatingBoundaryArea <- area )[Loci::Summation],
  constraint( fixedBoundaryFaces ) {
  $participatingBoundaryArea += $area.sada;
  }
//------------------------------------------------------------------
$rule apply( participatingBoundaryArea <- area )[Loci::Summation],
  constraint( movingBoundaryFaces ) {
  $participatingBoundaryArea += $area.sada;
  }

//------------------------------------------------------------------
$type participatingVolume               param<real>;
//------------------------------------------------------------------
$rule unit( participatingVolume ),
  constraint( UNIVERSE ) {
  $participatingVolume = 0.0;
  }
//------------------------------------------------------------------
$rule apply( participatingVolume <- vol )[Loci::Summation],
  constraint( geom_cells ) {
  $participatingVolume += $vol;
  }

//--------------------------------------------------------------------
$type movingCentroidSum                 param<vect3d> ;
//--------------------------------------------------------------------
$rule unit( movingCentroidSum ),
  constraint( UNIVERSE ) {
  $movingCentroidSum = vect3d(0,0,0) ;
  }
//--------------------------------------------------------------------
$rule apply( movingCentroidSum <- pos, nodeAreaWeight )[Loci::Summation],
  constraint( movingBoundaryNodes ) {
  $movingCentroidSum += $pos*$nodeAreaWeight;
  }

//--------------------------------------------------------------------
$type movingCentroid                    param<vect3d>;
//--------------------------------------------------------------------
$rule singleton( movingCentroid <- movingCentroidSum,
                 totalMovingNodeAreaWeight ),
  constraint( UNIVERSE ) {
  $movingCentroid = $movingCentroidSum/$totalMovingNodeAreaWeight;
  Loci::debugout << "movingNodeCentroid: " << $movingCentroid << endl;
  if (Loci::MPI_rank == 0) {
    cout << "movingNodeCentroid: " << $movingCentroid << endl;
  }
  }

//--------------------------------------------------------------------
$type participatingCentroid             param<vect3d> ;
//--------------------------------------------------------------------
$rule unit( participatingCentroid ),
                                      constraint( UNIVERSE ) {
  $participatingCentroid = vect3d(0,0,0) ;
                                      }
//--------------------------------------------------------------------
$rule apply( participatingCentroid <- vol, cellcenter,
             participatingVolume )[Loci::Summation],
  constraint(geom_cells) {
  $participatingCentroid += ($vol/$participatingVolume)*$cellcenter ;
  }

//--------------------------------------------------------------------
// This flag signals that we are working on a problem where all
// deformations are constrained to 2D.  In other words, no deformation
// out of the desired plane are allowed.  NOTE: Currently, the desired
// plane must be aligned with one of the three Cartesian coordinate
// planes.  Allowed values are "x", "y", and "z", denoting the desired
// coordinate value to be held constant.
//--------------------------------------------------------------------
$type gridDeformationPlane              param<string>;
//--------------------------------------------------------------------
$rule default( gridDeformationPlane ) {
  $gridDeformationPlane = "none";
}

//--------------------------------------------------------------------
// This flag causes a symmetrical set of boundary node data to be
// generated which will keep boundary nodes on a symmetry plane in the
// desired plane.  NOTE: Currently, the symmetry plane must pass
// through the origin and must be aligned with the Cartesian
// coordinate planes.
//--------------------------------------------------------------------
$type gridDeformationSymmetry           param<string>;
//--------------------------------------------------------------------
$rule optional(gridDeformationSymmetry) {
}

//------------------------------------------------------------------
// Default displacement for boundary nodes which have no prescribed
// motion and are also not free to move.
//------------------------------------------------------------------

$rule pointwise( nodeDisp_bc<-nodeDisp_b) { // By default no constraint
  $nodeDisp_bc = $nodeDisp_b ;
}


$rule pointwise(boundary::constraint::nodeDisp_bc<-nodeDisp_b,pos,surfaceMotionConstraintIdNode,motionConstraintList),constraint(prescribedMotionNodes,constrainedBoundaryNodes) {
  $nodeDisp_bc = $nodeDisp_b ;
  int id = -1 ;
  int cs = $motionConstraintList.size() ;
  for(int i=0;i<cs;++i)
    if($motionConstraintList[i].id == $surfaceMotionConstraintIdNode)
      id = i ;
  if(id != -1) {
    const gridMotion::constraintData &C = ($motionConstraintList)[id] ;
    vect3d np = $pos+$nodeDisp_b ;
    switch(C.constraintType) {
    case C_CYLINDER:
      {
        // compute cylinder axis
        vect3d axisNormal = to_Loci(C.v2-C.v1) ;
        real axisLength = norm(axisNormal) ;
        axisNormal *= 1./axisLength ;
        // project point on axis
        
        real axisPosDef = dot((np-to_Loci(C.v1)),axisNormal) ;
        vect3d axisPositionDef = axisPosDef*axisNormal+to_Loci(C.v1) ;
        vect3d radialVecDef = np-axisPositionDef ;
        real rlocd = norm(radialVecDef) ;
        //      Loci::debugout << "rlocd=" << rlocd << "np=" << np << endl ;
        vect3d correctDefPos = radialVecDef*C.r/(rlocd)+axisPositionDef ;

        vect3d Cdef = correctDefPos - $pos ;
        $nodeDisp_bc = Cdef ;
      }
      break ;
    case C_DISC:
    case C_PLANE:
      {
        vect3d dv = $nodeDisp_b ;
        vect3d Cdef = vect3d(dv) - to_Loci(C.v1)*(dot(vect3d(dv),to_Loci(C.v1))) ;
        $nodeDisp_bc = Cdef ;
      }
      break ;
    default:
      break ;
    }
  }
}

$rule pointwise(constraint::nodeDisp_bc<-pos,surfaceMotionConstraintIdNode,motionConstraintList,constraintBoundaryNodes),constraint(constrainedBoundaryNodes) {
  $nodeDisp_bc = vect3d(0,0,0) ;
  int id = -1 ;
  int cs = $motionConstraintList.size() ;
  int nbn = $constraintBoundaryNodes.size() ;
  for(int i=0;i<cs;++i)
    if($motionConstraintList[i].id == $surfaceMotionConstraintIdNode)
      id = i ;
  if(id != -1) {
    // Compute displacement vector
    vect3d disp = vect3d(0,0,0);
    real wsum = 0 ;
    for(int i=0;i<nbn;++i) {
      vect3d dif = $constraintBoundaryNodes[i].first-$pos ;
      real w = 1./dot(dif,dif) ;
      disp += w*($constraintBoundaryNodes[i].second) ;
      wsum += w ;
    }
    disp *= 1./wsum ;
    
    const gridMotion::constraintData &C = ($motionConstraintList)[id] ;
    vect3d np = $pos+disp ;
    switch(C.constraintType) {
    case C_CYLINDER:
      {
        // compute cylinder axis
        vect3d axisNormal = to_Loci(C.v2-C.v1) ;
        real axisLength = norm(axisNormal) ;
        axisNormal *= 1./axisLength ;
        // project point on axis
        
        real axisPosDef = dot((np-to_Loci(C.v1)),axisNormal) ;
        vect3d axisPositionDef = axisPosDef*axisNormal+to_Loci(C.v1) ;
        vect3d radialVecDef = np-axisPositionDef ;
        real rlocd = norm(radialVecDef) ;
        //      Loci::debugout << "rlocd=" << rlocd << "np=" << np << endl ;
        vect3d correctDefPos = radialVecDef*C.r/(rlocd)+axisPositionDef ;

        vect3d Cdef = correctDefPos - $pos ;
        $nodeDisp_bc = Cdef ;
      }
      break ;
    case C_DISC:
    case C_PLANE:
      {
        vect3d dv = disp ;
        vect3d Cdef = vect3d(dv) - to_Loci(C.v1)*(dot(vect3d(dv),to_Loci(C.v1))) ;
        $nodeDisp_bc = Cdef ;
      }
      break ;
    default:
      break ;
    }
  }
}

//------------------------------------------------------------------
$rule pointwise( priority::nodeDisp_b <- pos ),
  constraint( fixedBoundaryNodes ) {
  $nodeDisp_b = vect3d(0,0,0);
}


//------------------------------------------------------------------
// For each node, always add the edge which connects the current node
// to the next node in the face2node map.  Since all faces are
// boundary faces, the orientation of all faces adjacent to a given
// node will agree, and therefore, each edge will be added exactly
// once.
//
// 2011-01-21 [emc] Realized today that under certain circumstances,
// not all edges would be included.  Specifically, when a node is on
// the edge of a boundary surface, there will always be at least one
// adjacent edge that will not be included on the list.
//
// For each edge, we will add the relative position of the adjacent
// node with respect to the current node and the relative displacement
// of the adjacent node with respect to the displacement of the
// current node.
//------------------------------------------------------------------
$type nodeRotAccum    store< std::vector< std::pair<gridMotion::vect3d,gridMotion::vect3d> > >;
//------------------------------------------------------------------
$rule unit( nodeRotAccum ),
  constraint( participatingNodes ) {
  $nodeRotAccum.clear();
}
//------------------------------------------------------------------
$rule apply( face2node->nodeRotAccum <- face2node->pos,
             face2node->nodeDisp_bc )[gridMotion::Append],
  constraint( participatingFaces ) {
  // Direction orthogonal to the desired plane
  const int N = $face2node.size();
  for (int i=0; i<N; ++i) {
    // current node and its displacement
    const vect3d a  = $face2node[i]->$pos;
    const vect3d da = $face2node[i]->$nodeDisp_bc;
    for (int j=0; j<N; ++j) {
      if (i != j) {
        // nearby node and its displacement
        const vect3d b  = $face2node[j]->$pos;
        const vect3d db = $face2node[j]->$nodeDisp_bc;
        // project relative position and displacement onto the desired plane
        const gridMotion::vect3d u  = to_gridMotion(b-a);
        const gridMotion::vect3d du = to_gridMotion(db-da);
        $face2node[i]->$nodeRotAccum.push_back(make_pair(u,du));
      }
    }
  }
  }

//------------------------------------------------------------------
$type nodeRot_b                       store<Rotor>;
//------------------------------------------------------------------
$type rotorType param<int> ;

$rule singleton(rotorType<-gridDeformationPlane) {
  $rotorType = 0 ;
  if ( $gridDeformationPlane == "x" ||
       $gridDeformationPlane == "X" ) {
    $rotorType = 1 ;
  }
  else if ( $gridDeformationPlane == "y" ||
            $gridDeformationPlane == "Y" ) {
    $rotorType = 2 ;
  }
  else if ( $gridDeformationPlane == "z" ||
            $gridDeformationPlane == "Z" ) {
    $rotorType = 3 ;
  }
}
  
$rule pointwise( nodeRot_b <- nodeRotAccum, rotorType ),
  constraint( participatingNodes ) {
  $nodeRot_b = Rotor($nodeRotAccum);
  switch($rotorType) {
  case 0:
    break ;
  case 1:
    { // constrain rotation to stay in x=0 plane
      gridMotion::vect3d v1(0,1.0,0)  ; // rotate from baseline vector in plane
      gridMotion::vect3d v2 = ($nodeRot_b)(v1) ;
      v2.x = 0 ; // remove x plane part of rotation
      v2 *= 1./norm(v2) ; // renormalize
      $nodeRot_b = Rotor(v1,v2) ; // create new in plane rotor
    }
  case 2:
    { // constraint rotation to stay in y=0 plane
      gridMotion::vect3d v1(1.0,0,0)  ; // rotate from baseline vector in plane
      gridMotion::vect3d v2 = ($nodeRot_b)(v1) ;
      v2.y = 0 ; // remove y plane part of rotation
      v2 *= 1./norm(v2) ; // renormalize
      $nodeRot_b = Rotor(v1,v2) ; // create new in plane rotor
    }
  case 3:
    { // constraint rotation to stay in z=0 plane
      gridMotion::vect3d v1(1.0,0,0)  ; // rotat from baseline vector in plane
      gridMotion::vect3d v2 = ($nodeRot_b)(v1) ;
      v2.z = 0 ; // remove z plane part of rotation
      v2 *= 1./norm(v2) ; // renormalize
      $nodeRot_b = Rotor(v1,v2) ; // create new in plane rotor
    }
    break ;
  default:
    break ;
  }
  }

//------------------------------------------------------------------
$type nodeDataCollection              param< std::vector<NodeData> >;
//------------------------------------------------------------------

$type nodeDataCollectionBase          blackbox<std::vector<NodeData> > ;
$rule unit( nodeDataCollectionBase ),
  constraint( UNIVERSE ),prelude {
  $nodeDataCollectionBase->clear();
} ;
//--------------------------------------------------------------------
// Include all participating boundary node displacements
//--------------------------------------------------------------------
$rule apply( nodeDataCollectionBase <- pos, nodeAreaWeight, 
             nodeDisp_bc, nodeRot_b )[Loci::NullOp],
  constraint( participatingNodes ) {
  NodeData tmp;
  tmp.pos     = to_gridMotion($pos);
  tmp.disp    = to_gridMotion($nodeDisp_bc);
  tmp.rot     = $nodeRot_b;
  tmp.weight  = $nodeAreaWeight ;
  $nodeDataCollectionBase.push_back(tmp);
  }
//--------------------------------------------------------------------
// Include a set of boundary node data reflected across a yz-symmetry plane.
//--------------------------------------------------------------------
$rule apply( nodeDataCollectionBase <- pos, nodeAreaWeight, 
             nodeDisp_bc, nodeRot_b )[Loci::NullOp],
  constraint( participatingNodes,gridDeformationXSymmetry ) {
  NodeData tmp;
  tmp.pos     = to_gridMotion($pos);
  tmp.pos.x = -tmp.pos.x ;
  tmp.disp    = to_gridMotion($nodeDisp_bc);
  tmp.disp.x = -tmp.disp.x ;
  tmp.rot     = $nodeRot_b;
  tmp.rot.beta.x = -tmp.rot.beta.x ;
  tmp.rot.alpha = -tmp.rot.alpha ;
  tmp.weight  = $nodeAreaWeight ;
  $nodeDataCollectionBase.push_back(tmp);
}
//--------------------------------------------------------------------
// Include a set of boundary node data reflected across a xz-symmetry plane.
//--------------------------------------------------------------------
$rule apply( nodeDataCollectionBase <- pos, nodeAreaWeight, 
             nodeDisp_bc, nodeRot_b )[Loci::NullOp],
  constraint( participatingNodes,gridDeformationYSymmetry ) {
  NodeData tmp;
  tmp.pos     = to_gridMotion($pos) ;
  tmp.pos.y = -tmp.pos.y ;
  tmp.disp    = to_gridMotion($nodeDisp_bc);
  tmp.disp.y = -tmp.disp.y ;
  tmp.rot     = $nodeRot_b;
  tmp.rot.beta.y = -tmp.rot.beta.y ;
  tmp.rot.alpha = -tmp.rot.alpha ;
  tmp.weight  = $nodeAreaWeight ;
  $nodeDataCollectionBase.push_back(tmp);
}
//--------------------------------------------------------------------
// Include a set of boundary node data reflected across a xy-symmetry plane.
//--------------------------------------------------------------------
$rule apply( nodeDataCollectionBase <- pos, nodeAreaWeight, 
             nodeDisp_bc, nodeRot_b )[Loci::NullOp],
  constraint( participatingNodes,gridDeformationZSymmetry ) {
  NodeData tmp;
  tmp.pos     = to_gridMotion($pos);
  tmp.pos.z = -tmp.pos.z ;
  tmp.disp    = to_gridMotion($nodeDisp_bc);
  tmp.disp.z = -tmp.disp.z ;
  tmp.rot     = $nodeRot_b;
  tmp.rot.beta.z = -tmp.rot.beta.z ;
  tmp.rot.alpha = -tmp.rot.alpha ;
  tmp.weight  = $nodeAreaWeight ;
  $nodeDataCollectionBase.push_back(tmp);
}

$rule singleton(nodeDataCollection<-nodeDataCollectionBase) {
  int lsz = ($nodeDataCollectionBase).size() ;
  int p = Loci::MPI_processes ;
  vector<int> sizelist(p) ;
  MPI_Allgather(&lsz,1,MPI_INT,&sizelist[0],1,MPI_INT,MPI_COMM_WORLD) ;
  int totsz = 0 ;
  for(int i=0;i<p;++i)
    totsz += sizelist[i] ;
  ($nodeDataCollection) = vector<NodeData>(totsz) ;
  int size_factor = sizeof(NodeData) ;
  for(int i=0;i<p;++i)
    sizelist[i] *= size_factor ;
  vector<int> displs(p) ;
  displs[0] = 0 ;
  for(int i=1;i<p;++i)
    displs[i] = displs[i-1]+sizelist[i-1] ;
  vector<NodeData> senddata = $nodeDataCollectionBase ;

  MPI_Allgatherv(&senddata[0],lsz*size_factor,MPI_BYTE,
                 &($nodeDataCollection)[0],&sizelist[0],&displs[0],
                 MPI_BYTE, MPI_COMM_WORLD) ;
} ;




