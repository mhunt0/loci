Changes:
	GCC
		routines in shlocal.m4 to detect if the GXX_FIXES and EXT_HASH_MAP stuff was needed.
		Also, all headers should now #include <config.h>, which defines those two symbols if needed.
		Do not use -DGXX_FIXES -I$LOCI_BASE/include/g++-fixes, use the following

#ifdef GXX_FIXES
#include <g++-fixes/whatever>
#else
#include <whatever>
#endif

		This should work whether we're using the new configure system or the old {comp,sys,Loci}.conf system.

		Added include guards around config.h:
			#ifdef HAVE_CONFIG_H
			#include <config.h>
			#endif
		instead of
			#include <config.h>
		This allows us to use the old build system if we want to.  The old *.conf stuff defines the important parts of config.h (that's where config.h came from in the first place).

		Added {,par}metis.h to /System.  These are automatically found when using autoconf (it searches in the --with-metis=<dir> directory and adds that to the includes list given to the compiler); *.conf doesn't know where metis is installed, so those must be included.  It would probably be worthwhile to put METIS_INCLUDES=... into sys.comp in addition to METIS_LIBS=... .

		Changed sys.conf files to use 
			MAKE= <make> -f Makefile.original
		in the subdirectories.  The .original is the Makefile from the old system.  Autoconf generates Makefile on its own, if we don't save the old one, it'll get lost.  As a result, the user may have to do 
			make -f Makefile.original 
		in LOCI_BASE or make sure that autoconf doesn't get used and copy conf/Makefile.original to Makefile in LOCI_BASE. 
			
		We need to find a way to link to hdf5.  Currently it is added to the Loci library rather than linked in.  Since the linker uses shared libraries by default and HDF5 is not in the runtime linker's search path (swsetup hdf5 is needed), the shared version can't be used.

Shared Libraries:
	Right now, there is no support for shared libraries.  Libtool typically takes care of that but it has it's own system for building libraries; it must be used at all stages of compilation, in particular, it needs to be used as the linker.
	It would be nice if there were autoconf macros that figured out how to build shared libraries (there is a macro for detecting -{f,K}{pic,PIC} already, it would have to be expanded to actually build a library (with the appropriate switches like -shared for gcc, -o <something>.so for KCC) and with the runtime search path embedded in the executable (different with different compilers/linkers).

Chem:
	This is C++, all code must be compiled with the same compiler.  We need to save some state between compiling Loci and compiling the Chem.  Ideally, we could use a spec file a la GCC and autoconf could use that when setting variables from configure.
	Alternatively, make Loci and Chem one distribution.  This insures that they're compiled the same way.  But it's not particularly flexible, especially if more Loci-based apps come out of the woodwork.
	Alternatively, leave it up to the user to resolve.  If they don't use the same toolchain, it probably won't link in the first place.
	Perhaps the easiest method is to have Autoconf generate Loci.conf, or at least something similar.  It should work similarly to how it builds Makefiles (AC_OUTPUT(Loci.conf), Loci.conf: VAR=@value@..., I just haven't done that yet.
	
	Chem should also be autoconfiscated.  Most of the issues in building Loci apply to chem as well (especially the libraries).
	
