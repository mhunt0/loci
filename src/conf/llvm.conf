# C++ Compiler
ifeq ($(MPI_CPP_COMPILER),none)
CXX = g++
else
CXX = $(MPI_CPP_COMPILER)
endif
# Argument to tell compiler that source file is a c++ file, this is
# needed to support the intermediate files of .loci file compiles
FORCECPP = -x c++
# C Compiler
ifeq ($(MPI_C_COMPILER),none)
CC = gcc
else
CC  = $(MPI_C_COMPILER)
endif
# Fortran90 compiler
ifeq ($(MPI_F90_COMPILER),none)
F90 = gfortran
else
F90 = $(MPI_F90_COMPILER)
endif

LDBSL = g++ 
# Dependency Compiler
MAKEDEPEND = $(CXX) -M

# Turn ON/Off extra debugging error checking (usually off for optimized code)
# Also turn on array bounds checking (really slows things down)
# -DENTITY turns on type distinction between entity and integer.
ifeq ($(SYS_TYPE),Darwin)
WARNEXCEPT = -Wall -Wno-unused-function -Wno-unused-variable -Wno-type-safety#-Wno-long-double
else
WARNEXCEPT = -Wall
endif

DEBUG   =  #-Wall #-DDEBUG -DBOUNDS_CHECK 

SYSTEM_DEFINES = 


#Compiler option used to include debugging information
CC_DEBUG = #-g

ARCH_FLAGS_i686 =  -march=pentium3 -fno-math-errno -fno-trapping-math -ffinite-math-only -fno-signaling-nans -fstrict-aliasing -fomit-frame-pointer
ARCH_FLAGS_ppc = -fast  -fno-math-errno -fno-trapping-math -ffinite-math-only -fno-signaling-nans -fstrict-aliasing -fomit-frame-pointer
ARCH_FLAGS_ia64 = -fno-math-errno -fno-trapping-math -ffinite-math-only -fno-signaling-nans -fstrict-aliasing -fomit-frame-pointer -mb-step
ARCH_FLAGS_x86_64 = -fno-math-errno -fno-trapping-math -ffinite-math-only -fstrict-aliasing -fomit-frame-pointer #-ftree-vectorize -march=opteron

#Compiler option used to perform maximum optimization
CC_OPTIMIZE = $(WARNEXCEPT) -O3 $(ARCH_FLAGS_$(ARCH_TYPE))

#Compiler Option for reasonable compile times of less performace critical modules.
CC_OPTIMIZE_LOWER = $(WARNEXCEPT) -O1 $(ARCH_FLAGS_$(ARCH_TYPE))
EXCEPTIONS = 
CC_OPT1   = $(EXCEPTIONS) $(CC_OPTIMIZE_LOWER)
CC_OPT    = $(EXCEPTIONS) $(CC_OPTIMIZE) 
CC_LIB_FLAGS = $(EXCEPTIONS)

#Optimizer flags for the C compiler
C_OPT = -O3 -w

LD       = $(CXX)
ifeq ($(SYS_TYPE), SunOS)
LDFLAGS  = $(CC_OPTIMIZE)
else
LDFLAGS  = -rdynamic $(CC_OPTIMIZE)
endif

ifeq ($(SYS_TYPE),Darwin)
RPATH = -Wl,-rpath,
else
ifeq ($(SYS_TYPE),SunOS)
RPATH = -L
else
RPATH = -Wl,-rpath,
endif
endif

AR        = ar
ARFLAGS   = crv
RANLIB    = ranlib

ifeq ($(SYS_TYPE),Darwin)
PIC_FLAGS =
#Loadable module link
SHARED_LD = $(CXX) -bundle -flat_namespace -undefined suppress
SHARED_LD_FLAGS = -o 
#dynamic library link  (This still needs work)
DYNAMIC_LD = $(CXX) -dynamiclib -Wl,-undefined,dynamic_lookup #-install_name path -compatibility_version x.x -current_version x.x.x
DYNAMIC_LD_FLAGS = -o 
else
PIC_FLAGS = -fPIC
SHARED_LD = $(CXX) -shared
SHARED_LD_FLAGS = -o 
DYNAMIC_LD = $(CXX) -shared
DYNAMIC_LD_FLAGS = -o 
endif
