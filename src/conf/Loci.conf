SYS_TYPE := $(shell uname -s | sed "s/ //g" | sed "s/[-.]/_/g")
ARCH_TYPE := $(shell uname -m | sed "s/ //g")


LOCI_REV='$Name:  $'
COMP_NAME=$(shell echo $(CPP) | sed -e 's/ .*//' -e 's/.*\///')
LOCI_REV1 = $(shell echo "$(LOCI_REV)"| sed -e 's/.*: *//' -e 's/ *\$$//' -e 's/ //g')
LOCI_REVISION_NAME = $(shell if [ -n "$(LOCI_REV1)" ]; then echo "$(LOCI_REV1)"; else date +%m.%d.%y;fi)
LOCI_INSTALL_DIR = Loci-$(SYS_TYPE)-$(ARCH_TYPE)-$(COMP_NAME)-$(LOCI_REVISION_NAME)

LOCI_RPATH = $(INSTALL_DIR)/$(LOCI_INSTALL_DIR)/lib
#LOCI_RPATH = $(LOCI_BASE)/lib


include $(LOCI_BASE)/sys.conf
include $(LOCI_BASE)/comp.conf
export LD_LIBRARY_PATH:=$(LOCI_BASE)/lib:$(LD_LIBRARY_PATH)
export DYLD_LIBRARY_PATH:=$(LOCI_BASE)/lib:$(DYLD_LIBRARY_PATH)
# Loci Preprocessor
LPP = $(LOCI_BASE)/bin/lpp

# Setup library suffix
ifeq ($(SYS_TYPE),Darwin)
LIB_SUFFIX=dylib
else
LIB_SUFFIX=so
endif


DEFINES = $(SYSTEM_DEFINES) $(MACHINE_SPECIFIC) $(DEBUG) -DLOCI_SYS_$(SYS_TYPE) -DLOCI_ARCH_$(ARCH_TYPE)

LOCI_INCLUDES  = -I$(LOCI_BASE)/include 

LIBS      = $(RPATH)$(LOCI_RPATH) -L$(LOCI_BASE)/lib -lLoci -lTools $(BASE_LIBS) -lm -lsprng

CP  = $(CPP)

COPT     = $(CC_DEBUG) $(CC_OPT)
COPTLESS = $(CC_DEBUG) $(CC_OPT1)

LOPT     = $(CC_DEBUG) $(COPT)

%.cc : %.loci
	$(LPP) $(LOCI_INCLUDES) $(INCLUDES) $*.loci -o $*.cc

%_lo.o : %.c
	$(CC) $(PIC_FLAGS) $(C_OPT) $(DEFINES) $(LOCI_INCLUDES) $(INCLUDES) -o $*_lo.o -c $*.c
%_lo.o : %.cc
	$(CP) $(PIC_FLAGS) $(COPT) $(EXCEPTIONS) $(DEFINES) $(LOCI_INCLUDES) $(INCLUDES) -o $*_lo.o -c $*.cc
%_lo.o : %.C
	$(CP) $(PIC_FLAGS) $(COPT) $(EXCEPTIONS) $(DEFINES) $(LOCI_INCLUDES) $(INCLUDES) -o $*_lo.o -c $*.C
%_lo.o : %.cpp
	$(CP) $(PIC_FLAGS) $(COPT) $(EXCEPTIONS) $(DEFINES) $(LOCI_INCLUDES) $(INCLUDES) -o $*_lo.o -c $*.cpp

%_lo.o: %.f90
	$(F90) $(PIC_FLAGS) $(F_OPT) $(DEFINES) $(LOCI_INCLUDES) $(INCLUDES) -o $*_lo.o -c $*.f90

.SUFFIXES: .o .lo .c .cc .C .f90

.c.o:    ;  $(CC) $(C_OPT) $(DEFINES) $(LOCI_INCLUDES) $(INCLUDES) -c $*.c
.cc.o:   ;  $(CP) $(COPT) $(EXCEPTIONS) $(DEFINES) $(LOCI_INCLUDES) $(INCLUDES) -c $*.cc
.C.o:    ;  $(CP) $(COPT) $(EXCEPTIONS) $(DEFINES) $(LOCI_INCLUDES) $(INCLUDES) -c $*.C
.cpp.o:    ;  $(CP) $(COPT) $(EXCEPTIONS) $(DEFINES) $(LOCI_INCLUDES) $(INCLUDES) -c $*.cpp
.f90.o: ; $(F90) $(F_OPT) $(DEFINES) $(LOCI_INCLUDES) $(INCLUDES) -c $*.f90


# rule for generating dependencies from source files
%.d: %.c
	set -e; $(CC) -M $(C_OPT) $(DEFINES) $(LOCI_INCLUDES) $(INCLUDES) $< \
	| sed 's/\($*\)\.o[ :]*/\1.o \1_lo.o $@ : /g' > $@; \
		[ -s $@ ] || rm -f $@
%.d: %.C
	set -e; $(MAKEDEPEND) $(COPT) $(EXCEPTIONS) $(DEFINES) $(LOCI_INCLUDES) $(INCLUDES) $< \
	| sed 's/\($*\)\.o[ :]*/\1.o \1_lo.o $@ : /g' > $@; \
		[ -s $@ ] || rm -f $@
%.d: %.cc
	set -e; $(MAKEDEPEND) $(COPT) $(EXCEPTIONS) $(DEFINES) $(LOCI_INCLUDES) $(INCLUDES) $< \
	| sed 's/\($*\)\.o[ :]*/\1.o \1_lo.o $@ : /g' > $@; \
		[ -s $@ ] || rm -f $@

#HACK for now
%.d: %.f90
	echo -n > $@
