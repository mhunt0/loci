# C++ Compiler

ifeq ($(MPI_CXX_COMPILER),none)
CXX = icc -wd654 -Kc++ 
else
CXX = $(MPI_CXX_COMPILER) -cxx=icc -wd654

endif
# Argument to tell compiler that source file is a c++ file, this is
# needed to support the intermediate files of .loci file compiles
FORCECXX = -x c++
# C Compiler
ifeq ($(MPI_C_COMPILER),none)
CC = icc 
else
CC  = $(MPI_C_COMPILER) -cc=icc
endif
# Fortran90 compiler
ifeq ($(MPI_F90_COMPILER),none)
FC = ifort
else
FC = mpif90
endif

LDBSL = icc -wd654 -Kc++ 

# Dependency Compiler
MAKEDEPEND = $(CXX) -M

# Turn ON/Off extra debugging error checking (usually off for optimized code)
# Also turn on array bounds checking (really slows things down)
# -DENTITY turns on type distinction between entity and integer.
# Check for Debug Environment Variable
################################################################################
# Default Optimization Flags
################################################################################
OPT0	=	-O0
OPT1	=	-O1
OPT2	=	-O2
OPT3	=	-O3
OPTL    =   $(OPT1)

ifeq ($(BOUNDS_CHECK), 1)
	BOUNDS_DEFINES 	= -DBOUNDS_CHECK
else
	BOUNDS_DEFINES =
endif

# always include -Wall (all warnings) even in standard compilation mode
DEBUG = -Wall
ifneq ($(LOCI_DEBUG),)
	DEBUG			=	-Wall \
						-g3
	DEBUG_DEFINES	=	-DDEBUG
ifeq ($(LOCI_DEBUG), 0)
	OPT3	=	$(OPT0)
	OPTL    =   $(OPT0)
else ifeq ($(LOCI_DEBUG), 1)
	OPT3	=	$(OPT1)
else ifeq ($(LOCI_DEBUG), 2)
	OPT3	=	$(OPT2)
endif
endif

SYSTEM_DEFINES = BOUNDS_DEFINES


#Compiler option used to include debugging information
CC_DEBUG = #-g

#pentium 4 specialized optimization flags
ARCH_FLAGS_i686 = -xN -axN
#Westmere or SandyBridge nodes
ARCH_FLAGS_x86_64 =  -axAVX -xSSE4.1
#Compiler option used to perform maximum optimization
CC_OPTIMIZE = $(OPT3) -restrict -no-prec-div -inline-factor=150 -diag-disable cpu-dispatch -ansi_alias -ip $(ARCH_FLAGS_$(ARCH_TYPE))
#Compiler Option for reasonable compile times of less performace critical modules.
CC_OPTIMIZE_LOWER = $(OPTL) -ansi_alias -fp-model precise

CC_OPT1   = $(CC_OPTIMIZE_LOWER)
CC_OPT    = $(CC_OPTIMIZE) 
CC_LIB_FLAGS =

#Optimizer flags for the C compiler
C_OPT = $(CC_OPTIMIZE)
#Optimizer flags for f90 compiler
F_OPT = $(CC_OPTIMIZE) 

LD       = $(CXX) 
LDFLAGS  =  -rdynamic 
RPATH    = -Wl,-rpath,

AR        = ar
ARFLAGS   = crv
RANLIB    = ranlib

PIC_FLAGS = -fPIC
SHARED_LD = $(CXX) -shared
SHARED_LD_FLAGS = -o 
DYNAMIC_LD = $(CXX) -shared
DYNAMIC_LD_FLAGS = -o 
