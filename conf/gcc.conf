################################################################################
# C++ Compiler
################################################################################
ifeq ($(MPI_CXX_COMPILER),none)
	CXX	=	g++
else
	CXX	=	$(MPI_CXX_COMPILER)
endif

################################################################################
# C Compiler
################################################################################
ifeq ($(MPI_C_COMPILER),none)
	CC	=	gcc
else
	CC	=	$(MPI_C_COMPILER)
endif

################################################################################
# Fortran90 compiler
################################################################################
ifeq ($(MPI_FC_COMPILER),none)
	FC	=	gfortran
else
	FC	=	$(MPI_FC_COMPILER)
endif

AR			=	ar
ARFLAGS		=	crv
RANLIB		=	ranlib
LDBSL		=	g++
# Dependency Compiler
MAKEDEPEND	=	$(CXX) -M


# Compiler option used to include debugging information
ARCH_FLAGS			=	-fno-math-errno     \
						-fno-trapping-math  \
						-ffinite-math-only  \
						-fstrict-aliasing   \
						-fomit-frame-pointer

ARCH_FLAGS_i686		=	$(ARCH_FLAGS)        \
						-march=pentium3      \
						-fno-signaling-nans

ARCH_FLAGS_ppc		=	$(ARCH_FLAGS)        \
						-fast                \
						-fno-signaling-nans

ARCH_FLAGS_ia64		=	$(ARCH_FLAGS)        \
						-fno-signaling-nans  \
						-mb-step

ARCH_FLAGS_x86_64	=	$(ARCH_FLAGS)       \
						-fno-signaling-nans

PIC_FLAGS			=	-fPIC
LD					=	$(CXX)
SHARED_LD			=	$(LD)
DYNAMIC_LD			=	$(LD)
RPATH				=	-Wl,-rpath,


ifeq ($(SYS_TYPE), Darwin)
	ARCH_FLAGS_x86_64	=	$(ARCH_FLAGS)
	PIC_FLAGS			=
	SHARED_LD_FLAGS		+=	-bundle -flat_namespace -undefined suppress -o
	DYNAMIC_LD_FLAGS	+=	-dynamiclib -Wl,-undefined,dynamic_lookup -o
else
	SHARED_LD_FLAGS		+=	-shared -o
	DYNAMIC_LD_FLAGS	+=	-shared -o
endif

################################################################################
# Optimization Flags
################################################################################
OPT0	=	-O0
OPT1	=	-O1
OPT2	=	-O2
OPT3	=	-O3

# Check for Debug Environment Variable
ifneq ($(LOCI_DEBUG),)
	DEBUG			=	-Wall \
						-g3   \
						-ggdb \
						-fno-eliminate-unused-debug-symbols
	DEBUG_DEFINES	=	-DDEBUG \
						-DBOUNDS_CHECK
ifeq ($(LOCI_DEBUG), 0)
	OPT3	=	$(OPT0)
else ifeq ($(LOCI_DEBUG), 1)
	OPT3	=	$(OPT1)
else ifeq ($(LOCI_DEBUG), 2)
	OPT3	=	$(OPT2)
endif
endif

F_OPT	=	$(OPT3)
C_OPT	=	$(OPT3) -w
CXX_OPT	=	$(OPT3) -std=c++11

LDFLAGS	=	$(CXX_OPT)

ifneq ($(SYS_TYPE), SunOS)
	LDFLAGS	+=	-rdynamic
else
	RPATH	=	-L
endif


# # C++ Compiler
# ifeq ($(MPI_CPP_COMPILER),none)
# CPP = g++
# else
# CPP = $(MPI_CPP_COMPILER)
# endif
# # C Compiler
# ifeq ($(MPI_C_COMPILER),none)
# CC = gcc
# else
# CC  = $(MPI_C_COMPILER)
# endif
# # Fortran90 compiler
# ifeq ($(MPI_F90_COMPILER),none)
# F90 = gfortran
# else
# F90 = $(MPI_F90_COMPILER)
# endif

# LDBSL = g++
# # Dependency Compiler
# MAKEDEPEND = $(CPP) -M

# # Turn ON/Off extra debugging error checking (usually off for optimized code)
# # Also turn on array bounds checking (really slows things down)
# # -DENTITY turns on type distinction between entity and integer.
# ifeq ($(SYS_TYPE),Darwin)
# WARNEXCEPT = #-Wno-long-double
# else
# WARNEXCEPT =
# endif

# DEBUG   = $(WARNEXCEPT) -Wall #-DDEBUG -DBOUNDS_CHECK

# SYSTEM_DEFINES =


# #Compiler option used to include debugging information
# CC_DEBUG = #-g

# ARCH_FLAGS_i686 =  -march=pentium3 -fno-math-errno -fno-trapping-math -ffinite-math-only -fno-signaling-nans -fstrict-aliasing -fomit-frame-pointer
# ARCH_FLAGS_ppc = -fast  -fno-math-errno -fno-trapping-math -ffinite-math-only -fno-signaling-nans -fstrict-aliasing -fomit-frame-pointer
# ARCH_FLAGS_ia64 = -fno-math-errno -fno-trapping-math -ffinite-math-only -fno-signaling-nans -fstrict-aliasing -fomit-frame-pointer -mb-step
# ifeq ($(SYS_TYPE), Darwin)
# ARCH_FLAGS_x86_64 = -fno-math-errno -fno-trapping-math -ffinite-math-only -fstrict-aliasing -fomit-frame-pointer
# else
# ARCH_FLAGS_x86_64 = -fno-math-errno -fno-trapping-math -ffinite-math-only -fno-signaling-nans -fstrict-aliasing -fomit-frame-pointer
# endif

# #Compiler option used to perform maximum optimization
# CC_OPTIMIZE = -O3 $(ARCH_FLAGS_$(ARCH_TYPE))

# #Compiler Option for reasonable compile times of less performace critical modules.
# CC_OPTIMIZE_LOWER = -O1
# EXCEPTIONS =
# CC_OPT1   = $(EXCEPTIONS) $(CC_OPTIMIZE_LOWER)
# CC_OPT    = $(EXCEPTIONS) $(CC_OPTIMIZE)
# CC_LIB_FLAGS = $(EXCEPTIONS)

# #Optimizer flags for the C compiler
# C_OPT = -O3 -w

# LD       = $(CPP)
# ifeq ($(SYS_TYPE), SunOS)
# LDFLAGS  = $(CC_OPTIMIZE)
# else
# LDFLAGS  = -rdynamic $(CC_OPTIMIZE)
# endif

# ifeq ($(SYS_TYPE),Darwin)
# RPATH = -Wl,-rpath,
# else
# ifeq ($(SYS_TYPE),SunOS)
# RPATH = -L
# else
# RPATH = -Wl,-rpath,
# endif
# endif

# AR        = ar
# ARFLAGS   = crv
# RANLIB    = ranlib

# ifeq ($(SYS_TYPE),Darwin)
# PIC_FLAGS =
# #Loadable module link
# SHARED_LD = $(CPP) -bundle -flat_namespace -undefined suppress
# SHARED_LD_FLAGS = -o
# #dynamic library link  (This still needs work)
# DYNAMIC_LD = $(CPP) -dynamiclib -Wl,-undefined,dynamic_lookup #-install_name path -compatibility_version x.x -current_version x.x.x
# DYNAMIC_LD_FLAGS = -o
# else
# PIC_FLAGS = -fPIC
# SHARED_LD = $(CPP) -shared
# SHARED_LD_FLAGS = -o
# DYNAMIC_LD = $(CPP) -shared
# DYNAMIC_LD_FLAGS = -o
# endif
