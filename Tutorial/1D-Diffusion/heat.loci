#include <Loci.h>

$include "mesh.lh"

// Derived variables
$type xc store<float> ; // cell center
$type L  store<float> ; // cell length
$type u  store<float> ; // Solution variable
$type ub store<float> ; // solution variable at boundary
$type ux store<float> ; // derivative of u (du/dx)
$type R  store<float> ; // Diffusion residual equation

// Input parameters
$type N param<int> ;              // How many nodes
$type nu param<float> ;           // diffusion coefficient
$type max_iteration param<int> ;  // How many timesteps to take

$rule default(N) {
  $N=50 ;
}

$rule default(nu) {
  $nu = 1.0 ;
}

$rule default(max_iteration) {
  $max_iteration = 100 ;
}



// Timestepping control
$type dt param<float> ; // timestep
$type solution store<float> ; // final value
$type simulation_finished param<bool> ; // check for completion

// Rule 1: compute the cell center from node positions
$rule pointwise(xc<-(il,ir)->x) {
  $xc = .5*($il->$x + $ir->$x) ;
}

// Rule 2: compute the cell integral (Length)
$rule pointwise(L<-(il,ir)->x) {
  $L = $ir->$x-$il->$x ;
}

// Rule 3: compute the gradient of u
$rule pointwise(ux<-(cl,cr)->(u,xc)) {
  float dx = $cr->$xc - $cl->$xc ;
  float du = $cr->$u  - $cl->$u ;
  $ux = du/dx ;
}

//*******************************************************************
// Rules 4 and 5: Compute gradient at boundary
//*******************************************************************

$type h param<float> ;
$type g param<float> ;

$rule default(h) { $h = -1 ; } // h(t) = -1 ;
$rule default(g) { $g = 0 ; }  // g(t) = 0 ;

// Neuman boundary condition at left boundary (h(t) = -1)
$rule pointwise(ux<-h), constraint(left_boundary) {
  $ux = $h ;
}

// Dirichlet boundary at right boundary (g(t) = 0 )
$rule pointwise(ub<-g), constraint(right_boundary) {
  $ub = $g ;
}

// Compute gradient at boundary from ub
$rule pointwise(ux<-x,ub,cl->(u,xc)) {
  float dx = $x  - $cl->$xc ;
  float du = $ub - $cl->$u ;
  $ux = du/dx ;
}

// Rule 6: residual equation used by time integration
$rule pointwise(R<-nu,L,(il,ir)->ux) {
  $R = $nu*($ir->$ux-$il->$ux)/$L ;
}

//*******************************************************************
// Timestepping Algorithm
//*******************************************************************



//*******************************************************************
//Initializing values at time= 0 using u(x,0) = f(x). Since "xc" is
//used, it will calculate the values are cell-centers.
//*******************************************************************

float f(float xc) {
  return xc*(1-xc) ;
}

// Rule 7: initialization of iteration (build rule)
$rule pointwise(u{n=0}<-xc) {
  $u{n=0} = f($xc) ;
}

// Rule 8: time advance using explicit Euler time integration algorithm
$rule pointwise(u{n+1}<-u{n},dt{n},R{n}) {
  $u{n+1} = $u{n}+$dt{n}*$R{n} ;
}



//*******************************************************************
// Extra details, how do we terminate the loop?  We provide a
// collapse rule that will compute the final solution when we
// decide the simulation is finished.  "solution" becomes the
// generic goal of the program similar to "main" in a C program.
//*******************************************************************

$rule pointwise(solution<-u{n}),conditional(simulation_finished{n}) {
  $solution = $u{n} ;
}


// Condition that determines when iteration is complete
$rule singleton(simulation_finished<-$n,max_iteration) {
   $simulation_finished = ($$n >= $max_iteration) ;
}




//*******************************************************************
// Compute maximum stable timestep for simulation.  Use reduction rule
// and calculate timestep as a function of local conditions.  The global
// timestep is the minimum of these local timesteps
//*******************************************************************

$rule unit(dt), constraint(UNIVERSE) {
   $dt = std::numeric_limits<float>::max() ; // largest allowble timestep
}

$rule apply(dt<-L,nu)[Loci::Minimum] {
    float local_dt = $L*$L/(2.*$nu) ;  
    join($dt,local_dt) ; // Set dt = min(dt,local_dt)
}


