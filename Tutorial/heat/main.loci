#include <Loci.h>
#include <iostream>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>

using namespace std ;

int main(int argc, char *argv[])
{
  // Initialize Loci
  Loci::Init(&argc,&argv) ;

  // Setup exceptions so program aborts on floating point exceptions
  set_fpe_abort() ;

  // query for this variable by default
  std::string query = "solution" ;

  // Use -q queryvar to make alternative queries
  for (int i=1; i<argc; i++) {
    if (!strcmp(argv[i], "-q") && (i+1) < argc) {
      query = argv[i+1];
      for (int j=0; j<argc-i-2; j++) {
	argv[i+j] = argv[i+j+2];
      }
      argc -= 2;
      i--;
    } if(argv[i][0] == '-') {
      std::cerr << "argument " << argv[i] << " is not understood."
		<< std::endl;
    }
  }      

  // if output directory doesn't exist, create one
  struct stat statbuf ;
  int fid = open("output",O_RDONLY) ;
  if(fid < 0) {
    mkdir("output",0755) ;
  } else {
    fstat(fid,&statbuf) ;
    if(!S_ISDIR(statbuf.st_mode)) {
      cerr << "file 'output' should be a directory!, rename 'output' and start again."
           << endl ;
      Loci::Abort() ;
    }
    close(fid) ;
  }
  try {
    //-----------------------------------------------------------------
    // Create Rule Database
    //-----------------------------------------------------------------
    rule_db rdb ;
    cerr << "creating rule database" << endl ;
    rdb.add_rules(global_rule_list) ;
    // Load module of finite-volume helper rules
    Loci::load_module("fvm",rdb) ;
    
    //-----------------------------------------------------------------
    // Create Fact Database
    //-----------------------------------------------------------------
    fact_db facts ;
    
    if(argc <= 1) {
      cerr << "must provide case name as argument" << endl ;
      Loci::Abort() ;
    }
    string casename = argv[1] ;
    string varsFile = casename + ".vars" ;
    facts.read_vars(varsFile,rdb) ;
    param<std::string> modelName ;
    *modelName = casename ;
    facts.create_fact("modelName",modelName) ;
    string gridFile = casename + ".vog" ;
    if(!Loci::setupFVMGrid(facts,gridFile)) {
      cerr << "unable to read grid file '" << gridFile << "'" << endl ;
      Loci::Abort() ;
    }
    
    setupBoundaryConditions(facts) ;
    
    createLowerUpper(facts) ;
    
    // Query Loci for fact derived fact 'solution'
    Loci::makeQuery(rdb,facts,query) ;
  }
  catch(Loci::BasicException x) { // If Loci had an exception
    cerr << "an exception was encountered: " << endl ;
    x.Print(cerr) ;
  }
  catch(...) {
    cerr << "an unexpected exception was encountered" << endl ;
  }
  
  Loci::Finalize() ;
  return 0;
}
  
