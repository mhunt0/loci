#include <Loci.h>
$include "FVM.lh"
$include "heat.lh"

// Initial Conditions
$rule pointwise(Q{n=0}<-Density,Cp,T_initial),constraint(geom_cells) {
  $Q{n=0} = $Density*$Cp*$T_initial ;
}

// Note deltaQ will be computed as a result of the linear system
// assembly found in matrix.loci
$rule pointwise(Q{n+1}<-Q{n},deltaQ{n}), constraint(geom_cells) {
  $Q{n+1} = $Q{n}+ $deltaQ{n} ;
}

// Determine when we will finish timestepping
$type finishTimestep param<bool> ;

$rule singleton(finishTimestep<-$n,stop_iter) {
  $finishTimestep = ($$n > $stop_iter) ;
}

// Solution is the general result that we provide.  It is similar to main
// in a C program in that this is the default query.
$type solution store<real> ;

// Collapse to solution when we are finished iterating
$rule pointwise(solution<-Q{n}),conditional(finishTimestep{n}),
  constraint(geom_cells) { $solution = $Q{n} ; }

// Functions to tie it all together.
// Compute temperature from energy
$rule pointwise(temperature<-Q,Density,Cp) { $temperature = $Q/($Density*$Cp);}

// Compute transformation derivative from temperature to Q
$rule singleton(dTdQ<-Density,Cp) {$dTdQ = 1./($Cp*$Density);}
