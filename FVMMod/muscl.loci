//#############################################################################
//#
//# Copyright 2008, 2015, Mississippi State University
//#
//# This file is part of the Loci Framework.
//#
//# The Loci Framework is free software: you can redistribute it and/or modify
//# it under the terms of the Lesser GNU General Public License as published by
//# the Free Software Foundation, either version 3 of the License, or
//# (at your option) any later version.
//#
//# The Loci Framework is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# Lesser GNU General Public License for more details.
//#
//# You should have received a copy of the Lesser GNU General Public License
//# along with the Loci Framework.  If not, see <http://www.gnu.org/licenses>
//#
//#############################################################################
#include <Loci>
#include <Tools/tools.h>

// The following functions help to construct the flux terms 
// and flux Jacobian at the interface of the cell.
// Notes: In the finite volume approach, we need to know the flux
// terms at the interface. The procedure to compute the flux is shown
// in the following functions. 1. compute primitive variables from 
// conservative variables in each cell; 2. extrapolate the primitive 
// variables to face from the cell (there are right and left values for
// each face). in the current code, we employ the MUSCL extrapolation
// scheme; 3. construct the flux at the interface based on right and left 
// extrapolated conservative variables. In the current code, we apply the Roe 
// scheme; 4. numerical flux Jacobian matrix is calculated, which is a used to
// assemble matrix M in Mx = b (The solution of which results in the completion
// of the implicit algorithm).

namespace Loci {

  typedef vector3d<real_t> vect3d ;
  typedef tensor3d<real_t> tens3d ;
  typedef real_t real ;
  
  // The following is to get the face value using gradient approach.
  class muscl_left_scalar : public pointwise_rule {
    const_Map cl ;
    const_store<real> X ;
    const_store<vect3d> Xgrad ;
    const_store<vect3d> facecenter ;
    const_store<vect3d> cellcenter ;
    //    const_Map pmap ;
    const_store<real> grad_limiter ;
    // extrapolation primitive variables at the left (X_l) and right (X_r)
    // side of the interface (targets of this method)
    store<real> X_l ;
  public:
    muscl_left_scalar() ;
    void calculate(Entity e) ;
    virtual void compute(const sequence &seq) ;
  } ;

  muscl_left_scalar::muscl_left_scalar() {
    name_store("cl",cl) ;
    name_store("X",X) ;
    name_store("limiters(X)",grad_limiter) ;
    name_store("lefts(X)",X_l) ;
    name_store("facecenter",facecenter) ;
    name_store("cellcenter",cellcenter) ;
    name_store("grads(X)",Xgrad) ;
    input("facecenter") ;
    input("cl->(X,grads(X),limiters(X),cellcenter)") ; 
    output("lefts(X)") ; 
    constraint("facecenter") ;
  }

  inline void muscl_left_scalar::calculate(Entity fc) {
    const int ccl = cl[fc] ;
    const vect3d drl = facecenter[fc] - cellcenter[ccl] ;
    X_l[fc] = X[ccl] + grad_limiter[ccl]*dot(Xgrad[ccl],drl) ;
  }

  void muscl_left_scalar::compute(const sequence &seq) {
    do_loop(seq,this) ;
  }


  class muscl_right_scalar : public pointwise_rule {
    const_Map cr ;
    const_store<real> X ;
    const_store<vect3d> Xgrad ;
    const_store<vect3d> facecenter ;
    const_store<vect3d> cellcenter ;
    const_store<real> grad_limiter ;
    // extrapolation primitive variables at the left (X_l) and right (X_r)
    // side of the interface (targets of this method)
    store<real> X_r ;
  public:
    muscl_right_scalar() ;
    void calculate(Entity e) ;
    virtual void compute(const sequence &seq) ;
  } ;

  muscl_right_scalar::muscl_right_scalar() {
    name_store("cr",cr) ;
    name_store("X",X) ;
    name_store("limiters(X)",grad_limiter) ;
    name_store("rights(X)",X_r) ;
    name_store("facecenter",facecenter) ;
    name_store("cellcenter",cellcenter) ;
    name_store("grads(X)",Xgrad) ;
    input("facecenter") ;
    input("cr->(X,grads(X),limiters(X),cellcenter)") ; 
    output("rights(X)") ; 
    constraint("cr->(X,geom_cells)") ;
  }

  inline void muscl_right_scalar::calculate(Entity fc) {
    int ccr = cr[fc] ;
    const vect3d drr = facecenter[fc] - cellcenter[ccr] ;
    X_r[fc] = X[ccr] + grad_limiter[ccr]*dot(Xgrad[ccr],drr) ;
  }

  void muscl_right_scalar::compute(const sequence &seq) {
    do_loop(seq,this) ;
  }

  register_rule<muscl_left_scalar> register_muscl_left_scalar ;
  register_rule<muscl_right_scalar> register_muscl_right_scalar ;

  class zero_singleton : public singleton_rule {
    param<real> Zero ;
  public:
    zero_singleton() {
      name_store("Zero",Zero) ;
      output("Zero") ;
      constraint("UNIVERSE") ;
    }
    void compute(const sequence &seq) {
      *Zero = 0.0 ;
    }
  } ;
  register_rule<zero_singleton> register_zero_singleton ;

  class min_Pg_singleton : public singleton_rule {
    const_param<real_t> Pambient ;
    param<real> minPg ;
  public:
    min_Pg_singleton() {
      name_store("Pambient",Pambient) ;
      name_store("minPg",minPg) ;
      input("Pambient") ;
      output("minPg") ;
    }
    void compute(const sequence &seq) {
      *minPg = -*Pambient ;
    }
  } ;

  register_rule<min_Pg_singleton> register_min_Pg_singleton ;
  
  // The following is to get the face value using gradient approach.
  class muscl_left_scalarP : public pointwise_rule {
    const_Map cl ;
    const_store<real> X ;
    const_store<vect3d> Xgrad ;
    const_store<vect3d> facecenter ;
    const_store<vect3d> cellcenter ;
    const_store<real> grad_limiter ;
    const_param<real> min_value ;
    store<real> X_l ;
  public:
    muscl_left_scalarP() ;
    void calculate(Entity e) ;
    virtual void compute(const sequence &seq) ;
  } ;

  muscl_left_scalarP::muscl_left_scalarP() {
    name_store("cl",cl) ;
    name_store("X",X) ;
    name_store("limiters(X)",grad_limiter) ;
    name_store("leftsP(X,M)",X_l) ;
    name_store("facecenter",facecenter) ;
    name_store("cellcenter",cellcenter) ;
    name_store("grads(X)",Xgrad) ;
    name_store("M",min_value) ;
    input("M") ;
    input("facecenter") ;
    input("cl->(X,grads(X),limiters(X),cellcenter)") ; 
    output("leftsP(X,M)") ; 
    constraint("cl->(X,geom_cells)") ;
  }

  inline void muscl_left_scalarP::calculate(Entity fc) {
    const int ccl = cl[fc] ;
    const vect3d drl = facecenter[fc] - cellcenter[ccl] ;
    X_l[fc] = X[ccl] + grad_limiter[ccl]*dot(Xgrad[ccl],drl) ;
    if(X_l[fc] < min_value[fc])
      X_l[fc] = X[ccl] ;
  }

  void muscl_left_scalarP::compute(const sequence &seq) {
    do_loop(seq,this) ;
  }


  class muscl_right_scalarP : public pointwise_rule {
    const_Map cr ;
    const_store<real> X ;
    const_store<vect3d> Xgrad, facecenter, cellcenter ;
    const_store<real> grad_limiter ;
    const_param<real> min_value ;
    // extrapolation primitive variables at the left (X_l) and right (X_r)
    // side of the interface (targets of this method)
    store<real> X_r ;
  public:
    muscl_right_scalarP() ;
    void calculate(Entity e) ;
    virtual void compute(const sequence &seq) ;
  } ;

  muscl_right_scalarP::muscl_right_scalarP() {
    name_store("cr",cr) ;
    name_store("X",X) ;
    name_store("limiters(X)",grad_limiter) ;
    name_store("rightsP(X,M)",X_r) ;
    name_store("facecenter",facecenter) ;
    name_store("cellcenter",cellcenter) ;
    name_store("grads(X)",Xgrad) ;
    name_store("M",min_value) ;
    input("M") ;
    input("facecenter") ;
    input("cr->(X,grads(X),limiters(X),cellcenter)") ; 
    output("rightsP(X,M)") ; 
    constraint("cr->(X,geom_cells)") ;
  }

  inline void muscl_right_scalarP::calculate(Entity fc) {
    int ccr = cr[fc] ;
    const vect3d drr = facecenter[fc] - cellcenter[ccr] ;
    X_r[fc] = X[ccr] + grad_limiter[ccr]*dot(Xgrad[ccr],drr) ;
    if(X_r[fc] < min_value[fc])
      X_r[fc] = X[ccr] ;
  }

  void muscl_right_scalarP::compute(const sequence &seq) {
    do_loop(seq,this) ;
  }

  register_rule<muscl_left_scalarP> register_muscl_left_scalarP ;
  register_rule<muscl_right_scalarP> register_muscl_right_scalarP ;

  void slope_rescale(real *slopes, int vs) {

    real sum = 0.0, sumn = 0.0, sump = 0.0 ;
    for(int i=0;i<vs;++i) {
      sum += slopes[i] ;
      sumn += min(real_t(0.0),slopes[i]) ;
      sump += max(real_t(0.0),slopes[i]) ;
    }
    if(sum < 0.0) {
      for(int i=0;i<vs;++i)
        slopes[i] = slopes[i]*((slopes[i]<0.0)?(sumn-sum)/(sumn-1e-30):1.0) ;
    }
    if(sum > 0.0) {
      for(int i=0;i<vs;++i)
        slopes[i] = slopes[i]*((slopes[i]>0.0)?(sump-sum)/(sump-1e-30):1.0) ;
    }
  }    
  
  class muscl_left_vectorM : public pointwise_rule {
    const_Map cl ;
    const_storeVec<real> X, grad_limiter ;
    const_storeVec<vect3d> Xgrad ;
    const_store<vect3d> facecenter, cellcenter ;
    storeVec<real> X_l ;
  public:
    muscl_left_vectorM() ;
    void calculate(Entity e) ;
    virtual void compute(const sequence &seq) ;
  } ;

  muscl_left_vectorM::muscl_left_vectorM() {
    name_store("cl",cl) ;
    name_store("X",X) ;
    name_store("limiterv(X)",grad_limiter) ;
    name_store("leftvM(X)",X_l) ;
    name_store("facecenter",facecenter) ;
    name_store("cellcenter",cellcenter) ;
    name_store("gradv(X)",Xgrad) ;
    input("facecenter") ;
    input("cl->(X,gradv(X),limiterv(X),cellcenter)") ; 
    output("leftvM(X)") ; 
    constraint("cl->(X,geom_cells)") ;
  }

  inline void muscl_left_vectorM::calculate(Entity fc) {
    const Entity ccl = cl[fc] ;
    const vect3d drl = facecenter[fc] - cellcenter[ccl] ;
    const int vs = X.vecSize() ;

    // Extrapolate such that Sum slopes = 0
    tmp_array<real> slopes(vs) ;
  
    for(int i=0;i<vs;++i) {
      slopes[i] = grad_limiter[ccl][i]*dot(Xgrad[ccl][i],drl) ;
      // positivity check
      if(X[ccl][i]+slopes[i] < 0.0)
        slopes[i] = -X[ccl][i] ;
      // If close to positivity loosing region for opposite side of the
      // cell, switch to first order.
      if(X[ccl][i] - 1.5*slopes[i] < 0.0)
        slopes[i] = 0.0 ;
    }
    
    slope_rescale(slopes,vs) ;

    for(int i=0;i<vs;++i) {
      X_l[fc][i] = X[ccl][i] + slopes[i] ;
    }

  }
  void muscl_left_vectorM::compute(const sequence &seq) {
    X_l.setVecSize(X.vecSize()) ;
    do_loop(seq,this) ;
  }


  class muscl_right_vectorM : public pointwise_rule {
    const_Map cr ;
    const_storeVec<real> X, grad_limiter ;
    const_storeVec<vect3d> Xgrad ;
    const_store<vect3d> facecenter, cellcenter ;
    storeVec<real> X_r ;
  public:
    muscl_right_vectorM() ;
    void calculate(Entity e) ;
    virtual void compute(const sequence &seq) ;
  } ;

  muscl_right_vectorM::muscl_right_vectorM() {
    name_store("cr",cr) ;
    name_store("X",X) ;
    name_store("limiterv(X)",grad_limiter) ;
    name_store("rightvM(X)",X_r) ;
    name_store("facecenter",facecenter) ;
    name_store("cellcenter",cellcenter) ;
    name_store("gradv(X)",Xgrad) ;
    input("facecenter") ;
    input("cr->(X,gradv(X),limiterv(X),cellcenter)") ; 
    output("rightvM(X)") ; 
    constraint("cr->(X,geom_cells)") ;
  }

  inline void muscl_right_vectorM::calculate(Entity fc) {
    const int ccr = cr[fc] ;
    const vect3d drl = facecenter[fc] - cellcenter[ccr] ;
    const int vs = X.vecSize() ;

    // Extrapolate such that Sum slopes = 0
    tmp_array<real> slopes(vs) ;

    for(int i=0;i<vs;++i) {
      slopes[i] = grad_limiter[ccr][i]*dot(Xgrad[ccr][i],drl) ;
      // positivity check
      if(X[ccr][i]+slopes[i] < 0.0)
        slopes[i] = -X[ccr][i] ;
      // If opposite side could become negative, switch to first order
      // to maintain stablity
      if(X[ccr][i] - 1.5*slopes[i] < 0.0)
        slopes[i] = 0.0 ;
    }

    slope_rescale(slopes,vs) ;

    for(int i=0;i<vs;++i) {
      X_r[fc][i] = X[ccr][i] + slopes[i] ;
    }

  }
  void muscl_right_vectorM::compute(const sequence &seq) {
    X_r.setVecSize(X.vecSize()) ;
    do_loop(seq,this) ;
  }


  register_rule<muscl_left_vectorM> register_muscl_left_vectorM ;
  register_rule<muscl_right_vectorM> register_muscl_right_vectorM ;

  // The following is to get the face value using gradient approach.
  class muscl_left_vect3d : public pointwise_rule {
    const_Map cl ;
    const_store<vect3d> X ;
    const_store<tens3d> Xgrad ;
    const_store<vect3d> facecenter ;
    const_store<vect3d> cellcenter ;
    //    const_Map pmap ;
    const_store<vect3d> grad_limiter ;
    // extrapolation primitive variables at the left (X_l) and right (X_r)
    // side of the interface (targets of this method)
    store<vect3d> X_l ;
  public:
    muscl_left_vect3d() ;
    void calculate(Entity e) ;
    virtual void compute(const sequence &seq) ;
  } ;

  muscl_left_vect3d::muscl_left_vect3d() {
    name_store("cl",cl) ;
    name_store("X",X) ;
    name_store("limiterv3d(X)",grad_limiter) ;
    name_store("leftv3d(X)",X_l) ;
    name_store("facecenter",facecenter) ;
    name_store("cellcenter",cellcenter) ;
    name_store("gradv3d(X)",Xgrad) ;
    input("facecenter") ;
    input("cl->(X,gradv3d(X),limiterv3d(X),cellcenter)") ; 
    output("leftv3d(X)") ; 
    constraint("cl->(X,geom_cells)") ;
  }

  inline void muscl_left_vect3d::calculate(Entity fc) {
    const int ccl = cl[fc] ;
    const vect3d drl = facecenter[fc] - cellcenter[ccl] ;
    X_l[fc] = X[ccl] + vect3d(grad_limiter[ccl].x*dot(Xgrad[ccl].x,drl),
                              grad_limiter[ccl].y*dot(Xgrad[ccl].y,drl),
                              grad_limiter[ccl].z*dot(Xgrad[ccl].z,drl)) ;
  }

  void muscl_left_vect3d::compute(const sequence &seq) {
    do_loop(seq,this) ;
  }


  class muscl_right_vect3d : public pointwise_rule {
    const_Map cr ;
    const_store<vect3d> X ;
    const_store<tens3d> Xgrad ;
    const_store<vect3d> facecenter ;
    const_store<vect3d> cellcenter ;
    const_store<vect3d> grad_limiter ;
    // extrapolation primitive variables at the left (X_l) and right (X_r)
    // side of the interface (targets of this method)
    store<vect3d> X_r ;
  public:
    muscl_right_vect3d() ;
    void calculate(Entity e) ;
    virtual void compute(const sequence &seq) ;
  } ;

  muscl_right_vect3d::muscl_right_vect3d() {
    name_store("cr",cr) ;
    name_store("X",X) ;
    name_store("limiterv3d(X)",grad_limiter) ;
    name_store("rightv3d(X)",X_r) ;
    name_store("facecenter",facecenter) ;
    name_store("cellcenter",cellcenter) ;
    name_store("gradv3d(X)",Xgrad) ;
    input("facecenter") ;
    input("cr->(X,gradv3d(X),limiterv3d(X),cellcenter)") ; 
    output("rightv3d(X)") ; 
    constraint("cr->(X,geom_cells)") ;
  }

  inline void muscl_right_vect3d::calculate(Entity fc) {
    int ccr = cr[fc] ;
    const vect3d drr = facecenter[fc] - cellcenter[ccr] ;
    X_r[fc] = X[ccr] + vect3d(grad_limiter[ccr].x*dot(Xgrad[ccr].x,drr),
                              grad_limiter[ccr].y*dot(Xgrad[ccr].y,drr),
                              grad_limiter[ccr].z*dot(Xgrad[ccr].z,drr)) ;
  }

  void muscl_right_vect3d::compute(const sequence &seq) {
    do_loop(seq,this) ;
  }

  register_rule<muscl_left_vect3d> register_muscl_left_vect3d ;
  register_rule<muscl_right_vect3d> register_muscl_right_vect3d ;

  class muscl_right_scalar_periodic : public pointwise_rule {
    const_Map pmap ;
    const_store<real> X_l ;
    store<real> X_r ;
    
  public:
    muscl_right_scalar_periodic() ;
    void calculate(Entity e) ;
    virtual void compute(const sequence &seq) ;
  } ;

  muscl_right_scalar_periodic::muscl_right_scalar_periodic() {
    name_store("pmap",pmap) ;
    name_store("lefts(X)",X_l) ;
    name_store("rights(X)",X_r) ;
    input("pmap->lefts(X)") ; 
    output("rights(X)") ; 
    constraint("periodicFaces") ;
  }

  inline void muscl_right_scalar_periodic::calculate(Entity fc) {
    X_r[fc] = X_l[pmap[fc]] ;
  }

  void muscl_right_scalar_periodic::compute(const sequence &seq) {
    do_loop(seq,this) ;
  }

  register_rule<muscl_right_scalar_periodic> register_right_scalar_periodic ;
  
  class muscl_right_scalarP_periodic : public pointwise_rule {
    const_Map pmap ;
    const_store<real> X_l ;
    store<real> X_r ;
    
  public:
    muscl_right_scalarP_periodic() ;
    void calculate(Entity e) ;
    virtual void compute(const sequence &seq) ;
  } ;

  muscl_right_scalarP_periodic::muscl_right_scalarP_periodic() {
    name_store("pmap",pmap) ;
    name_store("leftsP(X,M)",X_l) ;
    name_store("rightsP(X,M)",X_r) ;
    input("pmap->leftsP(X,M)") ; 
    output("rightsP(X,M)") ; 
    constraint("periodicFaces") ;
  }

  inline void muscl_right_scalarP_periodic::calculate(Entity fc) {
    X_r[fc] = X_l[pmap[fc]] ;
  }

  void muscl_right_scalarP_periodic::compute(const sequence &seq) {
    do_loop(seq,this) ;
  }

  register_rule<muscl_right_scalarP_periodic> register_right_scalarP_periodic ;


  class muscl_right_mixture_periodic : public pointwise_rule {
    const_Map pmap ;
    const_storeVec<real> X_l ;
    storeVec<real> X_r ;
    
  public:
    muscl_right_mixture_periodic() ;
    void calculate(Entity e) ;
    virtual void compute(const sequence &seq) ;
  } ;

  muscl_right_mixture_periodic::muscl_right_mixture_periodic() {
    name_store("pmap",pmap) ;
    name_store("leftvM(X)",X_l) ;
    name_store("rightvM(X)",X_r) ;
    input("pmap->leftvM(X)") ; 
    output("rightvM(X)") ; 
    constraint("periodicFaces") ;
  }

  inline void muscl_right_mixture_periodic::calculate(Entity fc) {
    X_r[fc] = X_l[pmap[fc]] ;
  }

  void muscl_right_mixture_periodic::compute(const sequence &seq) {
    X_r.setVecSize(X_l.vecSize()) ;
    do_loop(seq,this) ;
  }

  register_rule<muscl_right_mixture_periodic> register_right_mixture_periodic ;
  
  class muscl_right_v3d_periodic : public pointwise_rule {
    const_Map pmap, ref ;
    const_store<vect3d> X_l ;
    store<vect3d> X_r ;
    const_store<rigid_transform> periodicTransform ;
    
  public:
    muscl_right_v3d_periodic() ;
    void calculate(Entity e) ;
    virtual void compute(const sequence &seq) ;
  } ;

  muscl_right_v3d_periodic::muscl_right_v3d_periodic() {
    name_store("pmap",pmap) ;
    name_store("leftv3d(X)",X_l) ;
    name_store("rightv3d(X)",X_r) ;
    name_store("ref",ref) ;
    name_store("periodicTransform",periodicTransform) ;
    input("pmap->ref->periodicTransform") ;
    input("pmap->leftv3d(X)") ; 
    output("rightv3d(X)") ; 
    constraint("periodicFaces") ;
  }

  inline void muscl_right_v3d_periodic::calculate(Entity fc) {
    const rigid_transform &frame = periodicTransform[ref[pmap[fc]]] ;
    X_r[fc] = frame.rotate_vec(X_l[pmap[fc]]) ;
  }

  void muscl_right_v3d_periodic::compute(const sequence &seq) {
    do_loop(seq,this) ;
  }

  register_rule<muscl_right_v3d_periodic> register_right_v3d_periodic ;

}

