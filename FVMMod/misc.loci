//#############################################################################
//#
//# Copyright 2008, 2015, Mississippi State University
//#
//# This file is part of the Loci Framework.
//#
//# The Loci Framework is free software: you can redistribute it and/or modify
//# it under the terms of the Lesser GNU General Public License as published by
//# the Free Software Foundation, either version 3 of the License, or
//# (at your option) any later version.
//#
//# The Loci Framework is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# Lesser GNU General Public License for more details.
//#
//# You should have received a copy of the Lesser GNU General Public License
//# along with the Loci Framework.  If not, see <http://www.gnu.org/licenses>
//#
//#############################################################################
#include <Loci.h>

$include "FVM.lh"

namespace Loci {

  $type L2_TMP(X) param<real_t> ;
  $type X store<real_t> ;
  
  $rule unit(L2_TMP(X)),constraint(geom_cells) {
    $L2_TMP(X) = 0 ;
  }
  $rule apply(L2_TMP(X)<-X,vol)[Loci::Summation],constraint(geom_cells) {
    join($L2_TMP(X),$X*$X*$vol) ;
  }

  $rule singleton(L2Norm(X)<-L2_TMP(X),grid_vol) {
    $L2Norm(X) = sqrt($L2_TMP(X)/$grid_vol) ;
  }

  $rule unit(L1Norm(X)), constraint(geom_cells) {
    $L1Norm(X) = 0 ;
  }

  $rule apply(L1Norm(X)<-X,vol,grid_vol)[Loci::Summation], constraint(geom_cells) {
    join($L1Norm(X),abs($X)*$vol/$grid_vol) ;
  }

  $rule unit(LinfNorm(X)),constraint(geom_cells) {
    $LinfNorm(X)=0 ;
  }

  $rule apply(LinfNorm(X)<-X)[Loci::Maximum],constraint(geom_cells) {
    join($LinfNorm(X),abs($X)) ;
  }

  class fileNumRule: public pointwise_rule {
    store<int> fileNumX ;
  public:
    fileNumRule() {
      name_store("fileNumber(X)",fileNumX) ;
      output("fileNumber(X)") ;
      constraint("X") ;
      disable_threading() ;
    }
    void compute(const sequence &seq) {
      fact_db::distribute_infoP df = Loci::exec_current_fact_db->get_distribute_info() ;

      if(Loci::MPI_processes > 1) {
        Map l2g ;
        l2g = df->l2g.Rep() ;
        dMap g2f ;
        g2f = df->g2f.Rep() ;
      
        for(sequence::const_iterator si=seq.begin();si!= seq.end();++si)
          fileNumX[*si] = g2f[l2g[*si]] ;
      } else {
        for(sequence::const_iterator si=seq.begin();si!= seq.end();++si)
          fileNumX[*si] = *si ;
      }
    }
  } ;
  
  register_rule<fileNumRule> register_fileNumRule ;

}
