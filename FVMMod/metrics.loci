//#############################################################################
//#
//# Copyright 2008, 2015, Mississippi State University
//#
//# This file is part of the Loci Framework.
//#
//# The Loci Framework is free software: you can redistribute it and/or modify
//# it under the terms of the Lesser GNU General Public License as published by
//# the Free Software Foundation, either version 3 of the License, or
//# (at your option) any later version.
//#
//# The Loci Framework is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# Lesser GNU General Public License for more details.
//#
//# You should have received a copy of the Lesser GNU General Public License
//# along with the Loci Framework.  If not, see <http://www.gnu.org/licenses>
//#
//#############################################################################
#include <Loci.h>
#include <Tools/tools.h>

$include "FVM.lh"

namespace Loci {

  $type gridCoordinates param<std::string> ;
  const real_t EPSILON=1e-33 ;
  $type centroid param<std::string> ;
  $type exactCentroid Constraint ;


  $rule default(gridCoordinates),
    comments("This sets the coordinate system for the grid metric computations. May be set to either cartesian or axisymmetric.  Use axisymmetric for two dimensional axisymmetric computations") {
    $gridCoordinates = "cartesian" ;
  }

  
  $rule default(centroid),
    comments("Determines how centroids are computed.  'wireframe' assumes the mass is located at the surface of the cell.  'exact' uses an exact centroid computation assuming mass is distributed through the cell volume.") {
    $centroid = "wireframe" ;
  }

  $type cartesianCoordinateModel Constraint ;
  $type axisymmetricCoordinateModel Constraint ;

  $rule constraint(cartesianCoordinateModel,axisymmetricCoordinateModel<-gridCoordinates) {
    $cartesianCoordinateModel = EMPTY ;
    $axisymmetricCoordinateModel = EMPTY ;
    if($gridCoordinates == "axisymmetric") {
      $axisymmetricCoordinateModel = $*gridCoordinates.domain() ;
    } else if($gridCoordinates == "cartesian") {
      $cartesianCoordinateModel = $*gridCoordinates.domain() ;
    } else {
      cerr << "gridCoordinates = " << $gridCoordinates << " not understood, defaulting to cartesian" << endl;
      $cartesianCoordinateModel = $*gridCoordinates.domain() ;
    }      
  }

  
  $rule constraint(exactCentroid<-centroid) {
    $exactCentroid = EMPTY ;
    if($centroid == "exact") 
      $exactCentroid = $*centroid.domain() ;
  } 

  // Compute thickness of extrusion (for axisymmetric case)
  $type cell_thickness store<real_t> ;
  $rule unit(cell_thickness),constraint(geom_cells) {
    $cell_thickness = 0 ;
  }
  $rule apply(ci->cell_thickness<-face2node->pos)[Loci::Summation] {
    int fsz = $face2node.size() ;
    vector3d<real_t> pt = $face2node[0]->$pos ;
    vector3d<real_t> sum = vector3d<real_t>(0,0,0) ;
    
    for(int i=1;i<fsz-1;++i) {
      sum += cross($face2node[i]->$pos-pt,$face2node[i+1]->$pos-pt) ;
    }
    sum *= 1./norm(sum) ;
    if(fabs(sum.z) > .99) {// in the z direction
      real_t val = pt.z*(sum.z>0?1.:-1.) ;
      join($ci->$cell_thickness,val) ;
    }
  }

  $type gridThickMax param<real_t> ;
  $type gridThickMin param<real_t> ;

  $rule unit(gridThickMax),constraint(UNIVERSE) {
    $gridThickMax = 0 ;
  }
  $rule apply(gridThickMax<-cell_thickness)[Loci::Maximum],constraint(geom_cells) {
    join($gridThickMax,($cell_thickness)) ;
  }

  $rule unit(gridThickMin),constraint(UNIVERSE) {
    $gridThickMin = 1e100 ;
  }

  $rule apply(gridThickMin<-cell_thickness)[Loci::Minimum],constraint(geom_cells) {
    join($gridThickMin,($cell_thickness)) ;
  }
    
  $type gridThickness param<real_t> ;
  $rule singleton(gridThickness<-gridThickMax,gridThickMin),constraint(axisymmetricCoordinateModel) {
    $gridThickness = .5*($gridThickMax+$gridThickMin) ;
    if($gridThickMin == 0 ||
       ($gridThickMax-$gridThickMin) > 1e-8) {
      cerr << "Grid not extruded as needed by axisymmetric computations" << endl ;
      cerr << "gridThickMin = " << $gridThickMin << " Max = " << $gridThickMax
           << endl ;
      Loci::Abort() ;
    }
  }
  
    
  $rule pointwise(area<-face2node->pos,facecenter),
              constraint(cartesianCoordinateModel,facecenter) {
     const vector3d<real_t> center = $facecenter ;
     const Entity *first = $face2node.begin() ;
     const Entity *last = ($face2node.end()-1) ;
     vector3d<real_t> sum(cross(last->$pos-center,first->$pos-center)) ;
     for(const Entity * ni=$face2node.begin()+1;ni!=($face2node.end());ni++) {
       const Entity *np = ni-1 ;
       sum = sum + cross(np->$pos-center,ni->$pos-center) ;
     }
     $area.n = sum ;
     const real_t sada = sqrt(dot(sum,sum)) ;
     $area.n *= 1./(sada+EPSILON) ;  //normalized normal vector of the face
     $area.sada = 0.5*sada ;  //area of the face
  }

  $rule pointwise(area<-face2node->pos,facecenter,gridThickness),
              constraint(axisymmetricCoordinateModel,facecenter) {
     const vector3d<real_t> center = $facecenter ;
     const Entity *first = $face2node.begin() ;
     const Entity *last = ($face2node.end()-1) ;
     vector3d<real_t> sum(cross(last->$pos-center,first->$pos-center)) ;
     for(const Entity * ni=$face2node.begin()+1;ni!=($face2node.end());ni++) {
       const Entity *np = ni-1 ;
       sum = sum + cross(np->$pos-center,ni->$pos-center) ;
     }
     $area.n = sum ;
     real_t sada = sqrt(dot(sum,sum)) ;
     $area.n *= 1./(sada+EPSILON) ;  //normalized normal vector of the face
     if(fabs($area.n.z) > 0.99) {
       sada = 0 ;
       $area.n.x = 0 ;
       $area.n.y = 0 ;
       if($area.n.z > 0)
         $area.n.z = 1 ;
       else
         $area.n.z = -1;
       $area.sada = 0 ; // For symmetry planes, set area to zero
     } else {
       $area.n.z = 0 ;
       // Compute the exact area of the conical frustrum analytically
       // First find the edge in the xy plane
       int fsz = $face2node.size() ;
       real_t r1=0,r2=0,h2=0 ;
       for(int i=1;i<fsz;++i) {
         vector3d<real_t> p1 = $face2node[i-1]->$pos ;
         vector3d<real_t> p2 = $face2node[i]->$pos ;
         if(fabs(p1.z-p2.z) < 1e-9) { // in xy plane
           r1 = p1.y ;
           r2 = p2.y ;
           h2 = (p1.x-p2.x)*(p1.x-p2.x) ;
           break ;
         }
       }
       $area.sada = M_PI*(r1+r2)*sqrt((r1-r2)*(r1-r2)+h2) ;
     }

  }



#define STRONG_CHECK

  $type minVolume param<real_t> ;
  $rule default(minVolume) {
    $minVolume = -1 ;
  }

  $rule pointwise(vol<-minVolume,cellcenter,(upper,lower,boundary_map)->(area,facecenter)),constraint(cartesianCoordinateModel,geom_cells) {
    real_t sum = 0.0 ;
    vector3d<real_t> dv ;
    for(const Entity* nf=$upper.begin();nf!=$upper.end();++nf) {
      dv = nf->$facecenter - $cellcenter ;
      sum = sum + nf->$area.sada*(dot(dv,nf->$area.n)) ;
#ifdef STRONG_CHECK
      if(dot(dv,nf->$area.n) < 0)
        Loci::debugout << "warning, non-convex cell" << _e_ << endl ;
#endif
    }
    for(const Entity* nf=$lower.begin();nf!=$lower.end();++nf) {
      dv = nf->$facecenter - $cellcenter ;
      sum = sum - nf->$area.sada*(dot(dv,nf->$area.n)) ;
#ifdef STRONG_CHECK
      if(dot(dv,nf->$area.n) > 0)
        Loci::debugout << "warning, non-convex cell " << _e_ << endl ;
#endif
    }
    for(const Entity* nf=$boundary_map.begin();nf!=$boundary_map.end();++nf) {
      dv = nf->$facecenter - $cellcenter ;
      sum = sum + nf->$area.sada*(dot(dv,nf->$area.n)) ;
#ifdef STRONG_CHECK
      if(dot(dv,nf->$area.n) < 0)
        Loci::debugout << "warning, non-convex cell " << _e_ << endl ;
#endif
    }
    $vol = sum/3.0 ;
    if(sum <= 0.0) {
      cerr << "MPI_rank = " << Loci::MPI_rank << ":  Zero or negative volume in grid cell id :" << _e_ << endl ;
      cerr << "For more information see debug file." << endl ;
      for(const Entity* nf=$upper.begin();nf!=$upper.end();++nf) {
	Loci::debugout << "upper facecenter [" << *nf << " ] =  "
                       << nf->$facecenter << endl ;
	Loci::debugout << "upper area [" << *nf << " ] =  "
                       << nf->$area << endl ;
      }
      for(const Entity * nf=$lower.begin();nf!=$lower.end();++nf) {
	Loci::debugout << "lower facecenter [" << *nf << " ] =  "
                       << nf->$facecenter << endl ;
	Loci::debugout << "lower area [" << *nf << " ] =  "
                       << nf->$area << endl ;
      }
      for(const Entity* nf=$boundary_map.begin();nf!=$boundary_map.end();++nf) {
	Loci::debugout << "BM facecenter [" << *nf << " ] =  "
                       << nf->$facecenter << endl ;
	Loci::debugout << "BM area [" << *nf << " ] =  "
                       << nf->$area << endl ;
      }
      Loci::debugout << " cellcenter [" << _e_ << " ] =  "
                     << $cellcenter << endl ;
      Loci::debugout << " volume[ " << _e_ << " ] = "
                     << $vol << endl ;
      
      $vol = max($minVolume,$vol) ;
      if($vol < 1e-40) 
	exit(-1) ;
    }
  }

  $rule pointwise(vol<-
                  (upper,lower,boundary_map)->area,
                  (upper,lower,boundary_map)->face2node->pos,gridThickness
                  ),constraint(geom_cells,axisymmetricCoordinateModel) {
#ifdef EXACT
    // Compute volume using analytical solid revolution
    // Use long double since viscous grids could cause catastrophic cancelation
    // in this routine.
    // Also using kahan summation to reduce errors
    long double vol_sum = 0 ;
    long double vol_c = 0 ;
    for(const Entity *id=$upper.begin();id!=$upper.end();++id) {
      int fsz = id->$face2node.size() ;
      long double r1=0,r2=0,x1=0,x2=0 ;
      for(int i=1;i<fsz;++i) {
        vector3d<real_t> p1 = id->$face2node[i-1]->$pos ;
        vector3d<real_t> p2 = id->$face2node[i]->$pos ;
        if(fabs(p1.z-p2.z) < 1e-9) { // in xy plane
          r1 = p1.y ;
          r2 = p2.y ;
          x1 = p1.x ;
          x2 = p2.x ;
          break ;
        }
      }
      long double sgn = (id->$area.n.y)>=0?1.:-1. ; // is volume inside or out?
      long double dx = x2-x1 ;
      long double dr = r2-r1 ;
      long double vpart = fabs(dx*(3.L*r1*r1+3.L*r1*dr+dr*dr))*sgn ;
      long double y = vpart - vol_c ;
      long double t = vol_sum + y ;
      vol_c = (t - vol_sum) - y ;
      vol_sum = t ;
    }
    for(const Entity *id=$lower.begin();id!=$lower.end();++id) {
      int fsz = id->$face2node.size() ;
      long double r1=0,r2=0,x1=0,x2=0 ;
      for(int i=1;i<fsz;++i) {
        vector3d<real_t> p1 = id->$face2node[i-1]->$pos ;
        vector3d<real_t> p2 = id->$face2node[i]->$pos ;
        if(fabs(p1.z-p2.z) < 1e-9) { // in xy plane
          r1 = p1.y ;
          r2 = p2.y ;
          x1 = p1.x ;
          x2 = p2.x ;
          break ;
        }
      }
      long double sgn = (id->$area.n.y)>=0?1.:-1. ;
      long double dx = x2-x1 ;
      long double dr = r2-r1 ;
      long double vpart = -fabs(dx*(3.L*r1*r1+3.L*r1*dr+dr*dr))*sgn ;
      long double y = vpart - vol_c ;
      long double t = vol_sum + y ;
      vol_c = (t - vol_sum) - y ;
      vol_sum = t ;
    }
    for(const Entity *id=$boundary_map.begin();id!=$boundary_map.end();++id) {
      if(id->$area.sada != 0) {
        int fsz = id->$face2node.size() ;
        long double r1=0,r2=0,x1=0,x2=0 ;
        for(int i=1;i<fsz;++i) {
          vector3d<real_t> p1 = id->$face2node[i-1]->$pos ;
          vector3d<real_t> p2 = id->$face2node[i]->$pos ;
          if(fabs(p1.z-p2.z) < 1e-9) { // in xy plane
            r1 = p1.y ;
            r2 = p2.y ;
            x1 = p1.x ;
            x2 = p2.x ;
            break ;
          }
        }
        long double sgn = (id->$area.n.y)>=0?1.:-1. ;
        long double dx = x2-x1 ;
        long double dr = r2-r1 ;
        long double vpart = fabs(dx*(3.L*r1*r1+3.L*r1*dr+dr*dr))*sgn ;
        long double y = vpart - vol_c ;
        long double t = vol_sum + y ;
        vol_c = (t - vol_sum) - y ;
        vol_sum = t ;
      }
    }

    if(vol_sum <=0) {
      cerr << "negative volume in grid" << endl ;
      Loci::Abort() ;
    }
    $vol = (M_PI/3.)*vol_sum ;
#else
    if($boundary_map.size() == 0)  {
      cerr << "Grid not extruded one cell!  Not a valid grid for axisymmetric computations" << endl ;
      Loci::Abort() ;
    }

    real_t volume = 0 ;
    for(const Entity *id=$boundary_map.begin();id!=$boundary_map.end();++id) {
      if(id->$area.n.z > .99) {
        int fsz = id->$face2node.size() ;
        real_t len  = norm(id->$face2node[0]->$pos-id->$face2node[fsz-1]->$pos) ;
        real_t len_sum = len ;
        vector3d<real_t> center = len*(id->$face2node[0]->$pos +
                                       id->$face2node[fsz-1]->$pos) ;
        for(int i=1;i<fsz;++i) {
          real_t len  = norm(id->$face2node[i-1]->$pos-
                             id->$face2node[i]->$pos) ;
          len_sum += len ;
          center +=  len*(id->$face2node[i-1]->$pos +
                          id->$face2node[i]->$pos) ;
        }
        center *= 1./(len_sum*2.) ;

        vector3d<real_t> d1 = (id->$face2node[fsz-1]->$pos - center) ;
        vector3d<real_t> d2 = (id->$face2node[0]->$pos - center) ;
        volume += cross(d1,d2).z*(id->$area.n.z)*
          (center.y+ id->$face2node[fsz-1]->$pos.y+ id->$face2node[0]->$pos.y) ;
        for(int i=1;i<fsz;++i) {
        
          vector3d<real_t> d1 = (id->$face2node[i-1]->$pos - center) ;
          vector3d<real_t> d2 = (id->$face2node[i]->$pos - center) ;
          volume += cross(d1,d2).z*(id->$area.n.z)*
            (center.y+id->$face2node[i-1]->$pos.y+ id->$face2node[i]->$pos.y) ;
        }
        volume *= M_PI/3.0 ;
      }
    }
    if(volume <= 0.0) {
      cerr << "negative or zero volume in axisymmetric mesh!" << endl ;
      cerr << "volume = " << volume << endl ;
      Loci::Abort() ;
    }
    $vol = volume ;
#endif
  }
  

  // Compute total grid volume
  $rule unit(grid_vol),constraint(vol) {
    $grid_vol = 0 ;
  }

  $rule apply(grid_vol<-vol)[Loci::Summation], constraint(geom_cells) {
    join($grid_vol,$vol) ;
  }

  //The following class gives the two perpendicular vectors in the face to 
  //form the orthogonal coordinates of the face along with the normal vector
  $rule pointwise(ln,mn<-area) {
    // find vectors orthogonal to axn,ayn,azn

    vector3d<real_t> l ; // vect3d defined in sciTypes.h
    const vector3d<real_t> &an = $area.n ; 
    //an.x, an.y, an.z are the x,y, and z components of an
    // Attempt to minimize cancellation error when finding orthogonal vector.
    // Find the coordinate direction which is largest and base orthognality
    // on that direction. (The three following cases are for x largest,
    // then y largest, and finally z largest.
    if(abs(an.x)>abs(an.y) && abs(an.x)>abs(an.z)) {
      if(abs(an.y)>abs(an.z)) {
        l.y = an.y ;
        l.z = -an.x ;
      } else {
        l.y = -an.x ;
        l.z = an.z ;
      }
      l.x = -(l.y*an.y+l.z*an.z)/an.x ;
    } else if(abs(an.y)>abs(an.x) && abs(an.y)>abs(an.z)) {
      if(abs(an.x)>abs(an.z)) {
        l.x = an.x ;
        l.z = -an.y ;
      } else {
        l.x = -an.y ;
        l.z = an.z ;
      }
      l.y = -(l.x*an.x+l.z*an.z)/an.y ;
    } else {
      if(abs(an.x)>abs(an.y)) {
        l.x = an.x ;
        l.y = -an.z ;
      } else {
        l.x = -an.z ;
        l.y = an.y ;
      }
      l.z = -(l.x*an.x+l.y*an.y)/an.z ;
    }

    warn(dot(l,l) < EPSILON) ; // Sanity check (should never happen)
    const real_t lsr = 1./sqrt(dot(l,l)) ;
    l *= lsr ;  //normalize the vector
    warn(dot(an,l) > 1e-9) ; // Sanity check, l and an should be orthogonal 
    
    $ln = l ;
    $mn = cross(l,an) ;
  }


  $rule pointwise(facecenter<-face2node->pos) {
    vector3d<real_t> nodesum(0.0,0.0,0.0) ;
    real_t lensum = 0 ;
    warn($face2node.begin() == $face2node.end() ||
         $face2node.begin()+1 == $face2node.end()) ;
    for(const Entity *id=$face2node.begin();id+1!=$face2node.end();++id) {
      const Entity *nd = id+1 ;
      vector3d<real_t> edge_loc = 0.5*(id->$pos + nd->$pos) ;
      vector3d<real_t> edge_vec = id->$pos - nd->$pos ;
      real_t len = sqrt(dot(edge_vec,edge_vec)) ;
      nodesum += len*edge_loc ;
      lensum += len ;
    }
    const Entity *id = $face2node.begin() ;
    const Entity *idend = $face2node.end() - 1 ;
    vector3d<real_t> edge_loc = 0.5*(id->$pos + idend->$pos) ;
    vector3d<real_t> edge_vec = id->$pos - idend->$pos ;
    real_t len = sqrt(dot(edge_vec,edge_vec)) ;
    nodesum += len*edge_loc ;
    lensum += len ;
    
    $facecenter = nodesum/lensum ;
  }

  $rule pointwise(cellcenter<-(upper,lower,boundary_map)->(facecenter,area)
                  ), constraint(geom_cells,cartesianCoordinateModel) {
    vector3d<real_t> nodesum(0.0,0.0,0.0) ;
    real_t areasum = 0 ;
    for(const Entity *id=$upper.begin();id!=$upper.end();++id) {
      nodesum += id->$area.sada*id->$facecenter ;
      areasum += id->$area.sada ;
    }
    for(const Entity *id=$lower.begin();id!=$lower.end();++id) {
      nodesum += id->$area.sada*id->$facecenter ;
      areasum += id->$area.sada ;
    }
    for(const Entity *id=$boundary_map.begin();id!=$boundary_map.end();++id) {
      nodesum += id->$area.sada*id->$facecenter ;
      areasum += id->$area.sada ;
    }
    $cellcenter = nodesum/areasum ;
  }
  
  /* 
   *	Computes the area-weighted face centroid by:
   *		- generating triangular facets from pairs of adjacent
   *		  vertices and the edge-length-weighted face
   *		  centroid,
   *		- computing the cross product of the vectors formed from
   *		  the two interior edges of the facet,
   *		- computing the area and midpoint of each edge,
   *		- performing the edge-length-weighted average of the
   *		  edge centers.
   */
  $rule pointwise(truecentroid::facecenter<-face2node->pos
                  ),constraint(exactCentroid,face2node->pos) {
    
    // Compute approximate centroid
    const int fsz = $face2node.size() ;
    vector3d<real_t> nodesum(0.0,0.0,0.0) ;
    for(int i=0;i<fsz;++i) 
      nodesum += $face2node[i]->$pos ;
    
    vector3d<real_t> tmpcenter = nodesum/real_t(fsz) ;
    
    // Iterate to find exact centroid that is on the face
    const int NITER=4 ;
    for(int iter=0;iter<NITER;++iter) {
    
      // compute centroid using triangles formed by wireframe centroid
      vector3d<real_t> centroidsum(0.0,0.0,0.0) ;
      real_t facearea = 0 ;
      for(int i=0;i<fsz;++i) {
        int n1 = i ;
        int n2 = (i+1==fsz)?0:i+1 ;
        const vector3d<real_t> t_centroid = ($face2node[n1]->$pos +
                                             $face2node[n2]->$pos +
                                             tmpcenter)/3.0 ;
        const real_t t_area = 0.5*norm(cross($face2node[n1]->$pos-tmpcenter,
                                             $face2node[n2]->$pos-tmpcenter)) ;
        centroidsum += t_area*t_centroid ;
        facearea += t_area ;
      }
      tmpcenter = centroidsum/facearea ;
    }
    $facecenter = tmpcenter ;
  }
  
  $rule pointwise(truecentroid::cellcenter<-
                  (upper,lower,boundary_map)->(facecenter,area),
                  (upper,lower,boundary_map)->face2node->pos
                  ),constraint(geom_cells,exactCentroid,
                               cartesianCoordinateModel) {
    vector3d<real_t> nodesum(0.0,0.0,0.0) ;
    real_t areasum = 0 ;
    for(const Entity *id=$upper.begin();id!=$upper.end();++id) {
      nodesum += id->$area.sada*id->$facecenter ;
      areasum += id->$area.sada ;
    }
    for(const Entity *id=$lower.begin();id!=$lower.end();++id) {
      nodesum += id->$area.sada*id->$facecenter ;
      areasum += id->$area.sada ;
    }
    for(const Entity *id=$boundary_map.begin();id!=$boundary_map.end();++id) {
      nodesum += id->$area.sada*id->$facecenter ;
      areasum += id->$area.sada ;
    }
    const vector3d<real_t> p4(nodesum/areasum) ; // approximate center used to
    // perform exact integration

    vector3d<real_t> csum(0.,0.,0.) ;
    real_t vol = 0 ;
    for(const Entity *id=$upper.begin();id!=$upper.end();++id) {
      int sz = id->$face2node.size() ;
      vector3d<real_t> nodesum(0.0,0.0,0.0) ;
      real_t lensum = 0 ;
      for(int i=0;i<sz;++i) {
        int nd1 = i ; 
        int nd2 = (i+1)%sz ;
        vector3d<real_t> e1 = id->$face2node[nd1]->$pos ;
        vector3d<real_t> e2 = id->$face2node[nd2]->$pos ;
        vector3d<real_t> edge_loc = .5*(e1 + e2) ;
        real_t len = norm(e1-e2) ;
        nodesum += len*edge_loc ;
        lensum += len ;
      }
      vector3d<real_t> fcenter = nodesum/lensum ;
      for(int i=0;i<sz;++i){
        int nd1 = i ;
        int nd2 = (i+1)%sz ;
        const vector3d<real_t> p1 = id->$face2node[nd1]->$pos ;
        const vector3d<real_t> p2 = id->$face2node[nd2]->$pos ;
        const vector3d<real_t> p3 = fcenter;
        const vector3d<real_t> centroid = (p1+p2+p3+p4) ;
        const real_t v = -dot(p4-p3,cross(p1-p3,p2-p3)) ;
        csum += v*centroid ;
        vol += v ;
      }
    }
    for(const Entity *id=$lower.begin();id!=$lower.end();++id) {
      int sz = id->$face2node.size() ;
      vector3d<real_t> nodesum(0.0,0.0,0.0) ;
      real_t lensum = 0 ;
      for(int i=0;i<sz;++i) {
        int nd1 = i ; 
        int nd2 = (i+1)%sz ;
        vector3d<real_t> e1 = id->$face2node[nd1]->$pos ;
        vector3d<real_t> e2 = id->$face2node[nd2]->$pos ;
        vector3d<real_t> edge_loc = .5*(e1 + e2) ;
        real_t len = norm(e1-e2) ;
        nodesum += len*edge_loc ;
        lensum += len ;
      }
      vector3d<real_t> fcenter = nodesum/lensum ;
      for(int i=0;i<sz;++i){
        int nd1 = i ;
        int nd2 = (i+1)%sz ;
        const vector3d<real_t> p1 = id->$face2node[nd1]->$pos ;
        const vector3d<real_t> p2 = id->$face2node[nd2]->$pos ;
        const vector3d<real_t> p3 = fcenter ;
        const vector3d<real_t> centroid = (p1+p2+p3+p4) ;
        const real_t v = dot(p4-p3,cross(p1-p3,p2-p3)) ;
        csum += v*centroid ;
        vol += v ;
      }
    }
    for(const Entity *id=$boundary_map.begin();id!=$boundary_map.end();++id) {
      int sz = id->$face2node.size() ;
      vector3d<real_t> nodesum(0.0,0.0,0.0) ;
      real_t lensum = 0 ;
      for(int i=0;i<sz;++i) {
        int nd1 = i ; 
        int nd2 = (i+1)%sz ;
        vector3d<real_t> e1 = id->$face2node[nd1]->$pos ;
        vector3d<real_t> e2 = id->$face2node[nd2]->$pos ;
        vector3d<real_t> edge_loc = .5*(e1 + e2) ;
        real_t len = norm(e1-e2) ;
        nodesum += len*edge_loc ;
        lensum += len ;
      }
      vector3d<real_t> fcenter = nodesum/lensum ;
      for(int i=0;i<sz;++i){
        int nd1 = i ;
        int nd2 = (i+1)%sz ;
        const vector3d<real_t> p1 = id->$face2node[nd1]->$pos ;
        const vector3d<real_t> p2 = id->$face2node[nd2]->$pos ;
        const vector3d<real_t> p3 = fcenter ;
        const vector3d<real_t> centroid = (p1+p2+p3+p4) ;
        const real_t v = -dot(p4-p3,cross(p1-p3,p2-p3)) ;
        csum += v*centroid ;
        vol += v ;
      }
    }
    $cellcenter = .25*csum/vol ;
  }

  $rule pointwise(cellcenter<-
                  (upper,lower,boundary_map)->(facecenter,area),
                  (upper,lower,boundary_map)->face2node->pos
                  ),constraint(geom_cells,axisymmetricCoordinateModel) {
    vector3d<real_t> nodesum(0.0,0.0,0.0) ;

    // cellcenter is just average of two symmetry plane face centers
    for(const Entity *id=$boundary_map.begin();id!=$boundary_map.end();++id) {
      if(fabs(id->$area.n.z) > 0.99)
        nodesum += 0.5*id->$facecenter ;
    }
    $cellcenter = nodesum ;
  }
  
  $type max_fpc param<int> ;

  $rule unit(max_fpc),constraint(lower,upper,boundary_map) {
    $max_fpc = 0 ;
  } 

  $rule apply(max_fpc<-lower,upper,boundary_map)[Loci::Maximum] {
    const int nfaces = $upper.size() +$lower.size()+$boundary_map.size() ;
    join($max_fpc,nfaces) ;
  }
}
