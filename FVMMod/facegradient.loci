#include <Loci.h>
#include <Tools/tools.h>

$include "FVM.lh"

namespace Loci {

  $type faceGradStencil param<std::string> ;
  
  $rule default(faceGradStencil),
    comments("Determines how face gradients will be computed.  May be 'positive' or 'limited'") {
    $faceGradStencil = "positive" ;
    //$faceGradStencil = "limited" ;
  }

  $type positiveFaceStencil Constraint ;
  $type limitedFaceStencil Constraint ;

  $rule constraint(positiveFaceStencil,limitedFaceStencil<-faceGradStencil) {
    $positiveFaceStencil = EMPTY ;
    $limitedFaceStencil = EMPTY ;
    if($faceGradStencil == "positive") {
      $positiveFaceStencil = $*faceGradStencil.domain() ;
    } else if($faceGradStencil == "limited") {
      $limitedFaceStencil = $*faceGradStencil.domain() ;
    }
  }
    
  typedef vector3d<real_t> vect3d ;
  typedef tensor3d<real_t> tens3d ;
  typedef real_t real ;

  $type X storeVec<real> ;
  $type X_f storeVec<real> ;
  
  $rule pointwise(gradv_f(X)<-(cr,cl)->(X,cellcenter,gradv(X),vol),area),
    constraint(positiveFaceStencil,(cl,cr)->X), prelude {
    $gradv_f(X).setVecSize($X.vecSize()) ;
  } compute {
    const vect3d delta = $cr->$cellcenter-$cl->$cellcenter ;
    const vect3d n = $area.n ;
    const real rdist = 1./dot(delta,n) ;
    const real vr = $cr->$vol ;
    const real vl = $cl->$vol ;
    const real dvrvl = 1./(vr+vl) ;
    const int vs = $*gradv_f(X).vecSize() ;
    for(int i=0;i<vs;++i) {
      const vect3d gradAvg=($cr->$gradv(X)[i]*vl+$cl->$gradv(X)[i]*vr)*dvrvl ;
      const vect3d gradTan=gradAvg-dot(gradAvg,n)*n ;
      const vect3d gradNorm=n*($cr->$X[i]-$cl->$X[i])*rdist ;
      $gradv_f(X)[i] = gradTan + gradNorm ;
    }
  }
  
  $rule pointwise(gradv_f(X)<-cl->(X,cellcenter,gradv(X)),X_f,facecenter,area),
      constraint(positiveFaceStencil,ci->X),prelude {
    $gradv_f(X).setVecSize($X.vecSize()) ;
  } compute {
    const vect3d delta = $facecenter-$cl->$cellcenter ;
    const vect3d n = $area.n ;
    const real rdist = 1./dot(delta,n) ;
    const int vs = $*gradv_f(X).vecSize() ;
    for(int i=0;i<vs;++i){
      const vect3d gradAvg = $cl->$gradv(X)[i] ;
      const vect3d gradTan=gradAvg-dot(gradAvg,n)*n ;
      const vect3d gradNorm = n*($X_f[i]-$cl->$X[i])*rdist ;
      $gradv_f(X)[i] = gradTan + gradNorm ;
    }
  }

  $type X store<real> ;
  $type X_f store<real> ;

  $rule pointwise(grads_f(X)<-(cr,cl)->(X,cellcenter,grads(X),vol),area),
    constraint(positiveFaceStencil,(cl,cr)->X) {
    const vect3d delta = $cr->$cellcenter-$cl->$cellcenter ;
    const vect3d n = $area.n ;
    const real rdist = 1./dot(delta,n) ;
    const real vr = $cr->$vol ;
    const real vl = $cl->$vol ;
    const real dvrvl = 1./(vr+vl) ;
    const vect3d gradAvg = ($cr->$grads(X)*vl+$cl->$grads(X)*vr)*dvrvl ;
    const vect3d gradTan=gradAvg-dot(gradAvg,n)*n ;
    const vect3d gradNorm = n*($cr->$X-$cl->$X)*rdist ;
      
    $grads_f(X) = gradTan + gradNorm ;
  }

  $rule pointwise(grads_f(X)<-cl->(X,cellcenter,grads(X)),X_f,facecenter,area),
    constraint(positiveFaceStencil,ci->X) {
    const vect3d delta = $facecenter-$cl->$cellcenter ;
    const vect3d n = $area.n ;
    const real rdist = 1./dot(delta,n) ;
    const vect3d gradAvg = $cl->$grads(X) ;
    const vect3d gradTan = gradAvg-dot(gradAvg,n)*n ;
    const vect3d gradNorm = n*($X_f-$cl->$X)*rdist ;

    $grads_f(X) = gradTan + gradNorm ;
  }

  $type X store<vect3d> ;
  $type X_f store<vect3d> ;

  $rule pointwise(gradv3d_f(X)<-(cr,cl)->(X,cellcenter,gradv3d(X),vol),area),
    constraint(positiveFaceStencil,(cl,cr)->X) {
    const vect3d delta = $cr->$cellcenter-$cl->$cellcenter ;
    const vect3d n = $area.n ;
    const real rdist = 1./dot(delta,n) ;
    const real vr = $cr->$vol ;
    const real vl = $cl->$vol ;
    const real dvrvl = 1./(vr+vl) ;

    vect3d gradAvg = ($cr->$gradv3d(X).x*vl+$cl->$gradv3d(X).x*vr)*dvrvl ;
    vect3d gradTan = gradAvg-dot(gradAvg,n)*n ;
    vect3d gradNorm = n*($cr->$X.x-$cl->$X.x)*rdist ;
    $gradv3d_f(X).x = gradTan + gradNorm ;

    gradAvg = ($cr->$gradv3d(X).y*vl+$cl->$gradv3d(X).y*vr)*dvrvl ;
    gradTan = gradAvg-dot(gradAvg,n)*n ;
    gradNorm = n*($cr->$X.y-$cl->$X.y)*rdist ;
    $gradv3d_f(X).y  = gradTan + gradNorm ;

    gradAvg = ($cr->$gradv3d(X).z*vl+$cl->$gradv3d(X).z*vr)*dvrvl ;
    gradTan = gradAvg-dot(gradAvg,n)*n ;
    gradNorm = n*($cr->$X.z-$cl->$X.z)*rdist ;
    $gradv3d_f(X).z  = gradTan + gradNorm ;
  }

  $rule pointwise(gradv3d_f(X)<-cl->(X,cellcenter,gradv3d(X)),X_f,facecenter,area),
    constraint(positiveFaceStencil,ci->X) {
    const vect3d delta = $facecenter-$cl->$cellcenter ;
    const vect3d n = $area.n ;
    const real rdist = 1./dot(delta,n) ;

    vect3d gradAvg = $cl->$gradv3d(X).x ;
    vect3d gradTan = gradAvg-dot(gradAvg,n)*n ;
    vect3d gradNorm = n*($X_f.x-$cl->$X.x)*rdist ;
    $gradv3d_f(X).x = gradTan + gradNorm ;

    gradAvg = $cl->$gradv3d(X).y ;
    gradTan = gradAvg-dot(gradAvg,n)*n ;
    gradNorm = n*($X_f.y-$cl->$X.y)*rdist ;
    $gradv3d_f(X).y = gradTan + gradNorm ;

    gradAvg = $cl->$gradv3d(X).z ;
    gradTan = gradAvg-dot(gradAvg,n)*n ;
    gradNorm = n*($X_f.z-$cl->$X.z)*rdist ;
    $gradv3d_f(X).z = gradTan + gradNorm ;
  }


  // Here we implement a directional derivative approach only limiting the
  // cell averaged gradients to prevent problems with maxima formation
  $type X storeVec<real> ;
  $type X_f storeVec<real> ;
  
  $rule pointwise(gradv_f(X)<-(cr,cl)->(X,cellcenter,gradv(X),vol),
                  (cl,cr)->limiterv(X),area),
    constraint(limitedFaceStencil,(cl,cr)->X), prelude {
    $gradv_f(X).setVecSize($X.vecSize()) ;
  } compute {
    const vect3d delta = $cr->$cellcenter-$cl->$cellcenter ;
    const vect3d n = $area.n ;
    const real rdist = 1./dot(delta,n) ;
    const real vr = $cr->$vol ;
    const real vl = $cl->$vol ;
    const real dvrvl = 1./(vr+vl) ;
    const int vs = $*gradv_f(X).vecSize() ;
    for(int i=0;i<vs;++i) {
      const real lim = min($cr->$limiterv(X)[i],$cl->$limiterv(X)[i]) ;
      const vect3d gradAvg=($cr->$gradv(X)[i]*vl+$cl->$gradv(X)[i]*vr)*dvrvl ;
      const vect3d gradTan=gradAvg-dot(gradAvg,n)*n ;
      const vect3d gradNorm=n*($cr->$X[i]-
                               ($cl->$X[i] + lim*dot(gradTan,delta)) )*rdist ;
      $gradv_f(X)[i] = gradTan + gradNorm ;
    }
  }
  
  $rule pointwise(gradv_f(X)<-cl->(X,cellcenter,gradv(X)),X_f,facecenter,
                  cl->limiterv(X),area),
      constraint(limitedFaceStencil,ci->X),prelude {
    $gradv_f(X).setVecSize($X.vecSize()) ;
  } compute {
    const vect3d delta = $facecenter-$cl->$cellcenter ;
    const vect3d n = $area.n ;
    const real rdist = 1./dot(delta,n) ;
    const int vs = $*gradv_f(X).vecSize() ;
    for(int i=0;i<vs;++i){
      const real lim = $cl->$limiterv(X)[i] ;
      const vect3d gradAvg = $cl->$gradv(X)[i] ;
      const vect3d gradTan=gradAvg-dot(gradAvg,n)*n ;
      const vect3d gradNorm = n*($X_f[i]-
                                 ($cl->$X[i] + lim*dot(gradTan,delta)))*rdist ;
      $gradv_f(X)[i] = gradTan + gradNorm ;
    }
  }

  $type X store<real> ;
  $type X_f store<real> ;

  $rule pointwise(grads_f(X)<-(cr,cl)->(X,cellcenter,grads(X),vol),
                  (cl,cr)->limiters(X), area),
    constraint(limitedFaceStencil,(cl,cr)->X) {
    const vect3d delta = $cr->$cellcenter-$cl->$cellcenter ;
    const vect3d n = $area.n ;
    const real rdist = 1./dot(delta,n) ;
    const real vr = $cr->$vol ;
    const real vl = $cl->$vol ;
    const real dvrvl = 1./(vr+vl) ;
    const real lim =min($cl->$limiters(X),$cr->$limiters(X)) ;
    const vect3d gradAvg = ($cr->$grads(X)*vl+$cl->$grads(X)*vr)*dvrvl ;
    const vect3d gradTan=gradAvg-dot(gradAvg,n)*n ;
    const vect3d gradNorm = n*($cr->$X-
                               ($cl->$X+lim*dot(gradTan,delta)))*rdist ;
      
    $grads_f(X) = gradTan + gradNorm ;
  }

  $rule pointwise(grads_f(X)<-cl->(X,cellcenter,grads(X)),X_f,facecenter,
                  cl->limiters(X),area),
    constraint(limitedFaceStencil,ci->X) {
    const vect3d delta = $facecenter-$cl->$cellcenter ;
    const vect3d n = $area.n ;
    const real rdist = 1./dot(delta,n) ;
    const real lim = $cl->$limiters(X) ;
    const vect3d gradAvg = $cl->$grads(X) ;
    const vect3d gradTan = gradAvg-dot(gradAvg,n)*n ;
    const vect3d gradNorm = n*($X_f-($cl->$X+lim*dot(gradTan,delta)))*rdist ;
    $grads_f(X) = gradTan + gradNorm ;
  }

  $type X store<vect3d> ;
  $type X_f store<vect3d> ;

  $rule pointwise(gradv3d_f(X)<-(cr,cl)->(X,cellcenter,gradv3d(X),vol),
                  (cl,cr)->limiterv3d(X),area),
    constraint(limitedFaceStencil,(cl,cr)->X) {
    const vect3d delta = $cr->$cellcenter-$cl->$cellcenter ;
    const vect3d n = $area.n ;
    const real rdist = 1./dot(delta,n) ;
    const real vr = $cr->$vol ;
    const real vl = $cl->$vol ;
    const real dvrvl = 1./(vr+vl) ;

    real lim = min($cr->$limiterv3d(X).x,$cl->$limiterv3d(X).x) ;
    vect3d gradAvg = ($cr->$gradv3d(X).x*vl+$cl->$gradv3d(X).x*vr)*dvrvl ;
    vect3d gradTan = gradAvg-dot(gradAvg,n)*n ;
    vect3d gradNorm = n*($cr->$X.x-($cl->$X.x+lim*dot(gradTan,delta)) )*rdist ;
    $gradv3d_f(X).x = gradTan + gradNorm ;

    lim = min($cr->$limiterv3d(X).y,$cl->$limiterv3d(X).y) ;
    gradAvg = ($cr->$gradv3d(X).y*vl+$cl->$gradv3d(X).y*vr)*dvrvl ;
    gradTan = gradAvg-dot(gradAvg,n)*n ;
    gradNorm = n*($cr->$X.y-($cl->$X.y + lim*dot(gradTan,delta)) )*rdist ;
    $gradv3d_f(X).y  = gradTan + gradNorm ;

    lim = min($cr->$limiterv3d(X).z,$cl->$limiterv3d(X).z) ;
    gradAvg = ($cr->$gradv3d(X).z*vl+$cl->$gradv3d(X).z*vr)*dvrvl ;
    gradTan = gradAvg-dot(gradAvg,n)*n ;
    gradNorm = n*($cr->$X.z-($cl->$X.z + lim*dot(gradTan,delta)) )*rdist ;
    $gradv3d_f(X).z  = gradTan + gradNorm ;
  }

  $rule pointwise(gradv3d_f(X)<-cl->(X,cellcenter,gradv3d(X)),X_f,facecenter,
                  cl->limiterv3d(X),area),
    constraint(limitedFaceStencil,ci->X) {
    const vect3d delta = $facecenter-$cl->$cellcenter ;
    const vect3d n = $area.n ;
    const real rdist = 1./dot(delta,n) ;

    real lim = $cl->$limiterv3d(X).x ;
    vect3d gradAvg = $cl->$gradv3d(X).x ;
    vect3d gradTan = gradAvg-dot(gradAvg,n)*n ;
    vect3d gradNorm = n*( $X_f.x-($cl->$X.x+lim*dot(gradTan,delta)) )*rdist ;
    $gradv3d_f(X).x = gradTan + gradNorm ;

    lim = $cl->$limiterv3d(X).y ;
    gradAvg = $cl->$gradv3d(X).y ;
    gradTan = gradAvg-dot(gradAvg,n)*n ;
    gradNorm = n*( $X_f.y-($cl->$X.y+lim*dot(gradTan,delta)) )*rdist ;
    $gradv3d_f(X).y = gradTan + gradNorm ;

    lim = $cl->$limiterv3d(X).z ;
    gradAvg = $cl->$gradv3d(X).z ;
    gradTan = gradAvg-dot(gradAvg,n)*n ;
    gradNorm = n*( $X_f.z-($cl->$X.z+lim*dot(gradTan,delta)) )*rdist ;
    $gradv3d_f(X).z = gradTan + gradNorm ;
  }

}
