//#############################################################################
//#
//# Copyright 2008-2019, Mississippi State University
//#
//# This file is part of the Loci Framework.
//#
//# The Loci Framework is free software: you can redistribute it and/or modify
//# it under the terms of the Lesser GNU General Public License as published by
//# the Free Software Foundation, either version 3 of the License, or
//# (at your option) any later version.
//#
//# The Loci Framework is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# Lesser GNU General Public License for more details.
//#
//# You should have received a copy of the Lesser GNU General Public License
//# along with the Loci Framework.  If not, see <http://www.gnu.org/licenses>
//#
//#############################################################################
#include <Loci.h>
#include <Tools/tools.h>

$include "FVM.lh"

namespace Loci {

  $type faceGradStencil param<std::string> ;
  
  $rule default(faceGradStencil),
    comments("Determines how face gradients will be computed.  May be 'positive' or 'limited'") {
    //$faceGradStencil = "positive" ;
    $faceGradStencil = "limited" ;
    //$faceGradStencil = "centered" ;
  }

  $type positiveFaceStencil Constraint ;
  $type limitedFaceStencil Constraint ;
  $type centeredFaceStencil Constraint ;

  $rule constraint(positiveFaceStencil,limitedFaceStencil,centeredFaceStencil
                   <-faceGradStencil) {
    $positiveFaceStencil = EMPTY ;
    $limitedFaceStencil = EMPTY ;
    $centeredFaceStencil = EMPTY ;
    if($faceGradStencil == "positive") {
      $positiveFaceStencil = $*faceGradStencil.domain() ;
    } else if($faceGradStencil == "limited") {
      $limitedFaceStencil = $*faceGradStencil.domain() ;
    } else if($faceGradStencil == "centered") {
      $centeredFaceStencil = $*faceGradStencil.domain() ;
    }
      
  }
    
  typedef vector3d<real_t> vect3d ;
  typedef tensor3d<real_t> tens3d ;
  typedef real_t real ;

  $type X storeVec<real> ;
  $type X_f storeVec<real> ;
  
  $rule pointwise(gradv_f(X)<-(cr,cl)->(X,cellcenter,gradv(X),vol),area),
    constraint(positiveFaceStencil,(cl,cr)->X), prelude {
    $gradv_f(X).setVecSize($X.vecSize()) ;
  } compute {
    const vect3d delta = $cr->$cellcenter-$cl->$cellcenter ;
    const vect3d n = $area.n ;
    const real rdist = 1./dot(delta,n) ;
    const real vr = $cr->$vol ;
    const real vl = $cl->$vol ;
    const real dvrvl = 1./(vr+vl) ;
    const int vs = $*gradv_f(X).vecSize() ;
    for(int i=0;i<vs;++i) {
      const vect3d gradAvg=($cr->$gradv(X)[i]*vl+$cl->$gradv(X)[i]*vr)*dvrvl ;
      const vect3d gradTan=gradAvg-dot(gradAvg,n)*n ;
      const vect3d gradNorm=n*($cr->$X[i]-$cl->$X[i])*rdist ;
      $gradv_f(X)[i] = gradTan + gradNorm ;
    }
  }
  
  $rule pointwise(gradv_f(X)<-cl->(X,cellcenter,gradv(X)),X_f,facecenter,area),
      constraint(positiveFaceStencil,ci->X),prelude {
    $gradv_f(X).setVecSize($X.vecSize()) ;
  } compute {
    const vect3d delta = $facecenter-$cl->$cellcenter ;
    const vect3d n = $area.n ;
    const real rdist = 1./dot(delta,n) ;
    const int vs = $*gradv_f(X).vecSize() ;
    for(int i=0;i<vs;++i){
      const vect3d gradAvg = $cl->$gradv(X)[i] ;
      const vect3d gradTan=gradAvg-dot(gradAvg,n)*n ;
      const vect3d gradNorm = n*($X_f[i]-$cl->$X[i])*rdist ;
      $gradv_f(X)[i] = gradTan + gradNorm ;
    }
  }

  $type X store<real> ;
  $type X_f store<real> ;

  $rule pointwise(grads_f(X)<-(cr,cl)->(X,cellcenter,grads(X),vol),area),
    constraint(positiveFaceStencil,(cl,cr)->X) {
    const vect3d delta = $cr->$cellcenter-$cl->$cellcenter ;
    const vect3d n = $area.n ;
    const real rdist = 1./dot(delta,n) ;
    const real vr = $cr->$vol ;
    const real vl = $cl->$vol ;
    const real dvrvl = 1./(vr+vl) ;
    const vect3d gradAvg = ($cr->$grads(X)*vl+$cl->$grads(X)*vr)*dvrvl ;
    const vect3d gradTan=gradAvg-dot(gradAvg,n)*n ;
    const vect3d gradNorm = n*($cr->$X-$cl->$X)*rdist ;
      
    $grads_f(X) = gradTan + gradNorm ;
  }

  $rule pointwise(grads_f(X)<-cl->(X,cellcenter,grads(X)),X_f,facecenter,area),
    constraint(positiveFaceStencil,ci->X) {
    const vect3d delta = $facecenter-$cl->$cellcenter ;
    const vect3d n = $area.n ;
    const real rdist = 1./dot(delta,n) ;
    const vect3d gradAvg = $cl->$grads(X) ;
    const vect3d gradTan = gradAvg-dot(gradAvg,n)*n ;
    const vect3d gradNorm = n*($X_f-$cl->$X)*rdist ;

    $grads_f(X) = gradTan + gradNorm ;
  }

  $type X store<vect3d> ;
  $type X_f store<vect3d> ;

  $rule pointwise(gradv3d_f(X)<-(cr,cl)->(X,cellcenter,gradv3d(X),vol),area),
    constraint(positiveFaceStencil,(cl,cr)->X) {
    const vect3d delta = $cr->$cellcenter-$cl->$cellcenter ;
    const vect3d n = $area.n ;
    const real rdist = 1./dot(delta,n) ;
    const real vr = $cr->$vol ;
    const real vl = $cl->$vol ;
    const real dvrvl = 1./(vr+vl) ;

    vect3d gradAvg = ($cr->$gradv3d(X).x*vl+$cl->$gradv3d(X).x*vr)*dvrvl ;
    vect3d gradTan = gradAvg-dot(gradAvg,n)*n ;
    vect3d gradNorm = n*($cr->$X.x-$cl->$X.x)*rdist ;
    $gradv3d_f(X).x = gradTan + gradNorm ;

    gradAvg = ($cr->$gradv3d(X).y*vl+$cl->$gradv3d(X).y*vr)*dvrvl ;
    gradTan = gradAvg-dot(gradAvg,n)*n ;
    gradNorm = n*($cr->$X.y-$cl->$X.y)*rdist ;
    $gradv3d_f(X).y  = gradTan + gradNorm ;

    gradAvg = ($cr->$gradv3d(X).z*vl+$cl->$gradv3d(X).z*vr)*dvrvl ;
    gradTan = gradAvg-dot(gradAvg,n)*n ;
    gradNorm = n*($cr->$X.z-$cl->$X.z)*rdist ;
    $gradv3d_f(X).z  = gradTan + gradNorm ;
  }

  $rule pointwise(gradv3d_f(X)<-cl->(X,cellcenter,gradv3d(X)),X_f,facecenter,area),
    constraint(positiveFaceStencil,ci->X) {
    const vect3d delta = $facecenter-$cl->$cellcenter ;
    const vect3d n = $area.n ;
    const real rdist = 1./dot(delta,n) ;

    vect3d gradAvg = $cl->$gradv3d(X).x ;
    vect3d gradTan = gradAvg-dot(gradAvg,n)*n ;
    vect3d gradNorm = n*($X_f.x-$cl->$X.x)*rdist ;
    $gradv3d_f(X).x = gradTan + gradNorm ;

    gradAvg = $cl->$gradv3d(X).y ;
    gradTan = gradAvg-dot(gradAvg,n)*n ;
    gradNorm = n*($X_f.y-$cl->$X.y)*rdist ;
    $gradv3d_f(X).y = gradTan + gradNorm ;

    gradAvg = $cl->$gradv3d(X).z ;
    gradTan = gradAvg-dot(gradAvg,n)*n ;
    gradNorm = n*($X_f.z-$cl->$X.z)*rdist ;
    $gradv3d_f(X).z = gradTan + gradNorm ;
  }


  // Here we implement a directional derivative approach only limiting the
  // cell averaged gradients to prevent problems with maxima formation
  $type X storeVec<real> ;
  $type X_f storeVec<real> ;
  
  $rule pointwise(gradv_f(X)<-(cr,cl)->(X,cellcenter,gradv(X),vol),area,
                  (cl,cr)->limiterv(X)),
    constraint(limitedFaceStencil,(cl,cr)->X), prelude {
    $gradv_f(X).setVecSize($X.vecSize()) ;
  } compute {
    const vect3d delta = $cr->$cellcenter-$cl->$cellcenter ;
    const vect3d n = $area.n ;
    const real rdist = 1./dot(delta,n) ;
    const real vr = $cr->$vol ;
    const real vl = $cl->$vol ;
    const real dvrvl = 1./(vr+vl) ;
    const int vs = $*gradv_f(X).vecSize() ;
    for(int i=0;i<vs;++i) {
      const vect3d gl = $cl->$gradv(X)[i] ;
      const vect3d gr = $cr->$gradv(X)[i] ;
      const vect3d gradAvg=(gr*vl+gl*vr)*dvrvl ;
      const vect3d gradTan=gradAvg-dot(gradAvg,n)*n ;
      const real L_v = $cl->$limiterv(X)[i]*$cr->$limiterv(X)[i] ;
      const vect3d gradNorm=n*($cr->$X[i]-
                               ($cl->$X[i] + L_v*dot(gradTan,delta)) )*rdist ;
      $gradv_f(X)[i] = gradTan + gradNorm ;
    }
  }
  
  $rule pointwise(gradv_f(X)<-cl->(X,cellcenter,gradv(X)),X_f,facecenter,
                  cl->limiterv(X),area),
      constraint(limitedFaceStencil,ci->X),prelude {
    $gradv_f(X).setVecSize($X.vecSize()) ;
  } compute {
    const vect3d delta = $facecenter-$cl->$cellcenter ;
    const vect3d n = $area.n ;
    const real rdist = 1./dot(delta,n) ;
    const int vs = $*gradv_f(X).vecSize() ;
    for(int i=0;i<vs;++i){
      const real lim = $cl->$limiterv(X)[i] ;
      const vect3d gradAvg = $cl->$gradv(X)[i] ;
      const vect3d gradTan=gradAvg-dot(gradAvg,n)*n ;
      const vect3d gradNorm = n*($X_f[i]-
                                 ($cl->$X[i] + lim*dot(gradTan,delta)))*rdist ;
      $gradv_f(X)[i] = gradTan + gradNorm ;
    }
  }

  $type X store<real> ;
  $type X_f store<real> ;

  $rule pointwise(grads_f(X)<-(cr,cl)->(X,cellcenter,grads(X),vol),area,
                  (cl,cr)->limiters(X)),
    constraint(limitedFaceStencil,(cl,cr)->X) {
    const vect3d delta = $cr->$cellcenter-$cl->$cellcenter ;
    const vect3d n = $area.n ;
    const real rdist = 1./dot(delta,n) ;
    const real vr = $cr->$vol ;
    const real vl = $cl->$vol ;
    const real dvrvl = 1./(vr+vl) ;


    const vect3d gl = $cl->$grads(X) ;
    const vect3d gr = $cr->$grads(X) ;
    const vect3d gradAvg = (gr*vl+gl*vr)*dvrvl ;
    const vect3d gradTan=gradAvg-dot(gradAvg,n)*n ;    
    const real L_v = $cl->$limiters(X)*$cr->$limiters(X) ;
    const vect3d gradNorm = n*($cr->$X-
                               ($cl->$X+L_v*dot(gradTan,delta)))*rdist ;
      
    $grads_f(X) = gradTan + gradNorm ;
  }

  $rule pointwise(grads_f(X)<-cl->(X,cellcenter,grads(X)),X_f,facecenter,
                  cl->limiters(X),area),
    constraint(limitedFaceStencil,ci->X) {
    const vect3d delta = $facecenter-$cl->$cellcenter ;
    const vect3d n = $area.n ;
    const real rdist = 1./dot(delta,n) ;
    const real lim = $cl->$limiters(X) ;
    const vect3d gradAvg = $cl->$grads(X) ;
    const vect3d gradTan = gradAvg-dot(gradAvg,n)*n ;
    const vect3d gradNorm = n*($X_f-($cl->$X+lim*dot(gradTan,delta)))*rdist ;
    $grads_f(X) = gradTan + gradNorm ;
  }

  $type X store<vect3d> ;
  $type X_f store<vect3d> ;

  $rule pointwise(gradv3d_f(X)<-(cr,cl)->(X,cellcenter,gradv3d(X),vol),area,
                  (cl,cr)->limiterv3d(X)),
    constraint(limitedFaceStencil,(cl,cr)->X) {
    const vect3d delta = $cr->$cellcenter-$cl->$cellcenter ;
    const vect3d n = $area.n ;
    const real rdist = 1./dot(delta,n) ;
    const real vr = $cr->$vol ;
    const real vl = $cl->$vol ;
    const real dvrvl = 1./(vr+vl) ;

    vect3d gl = $cl->$gradv3d(X).x ;
    vect3d gr = $cr->$gradv3d(X).x ;
    real L_v = $cl->$limiterv3d(X).x*$cr->$limiterv3d(X).x ;
    vect3d gradAvg = (gr*vl+gl*vr)*dvrvl ;
    vect3d gradTan = gradAvg-dot(gradAvg,n)*n ;
    vect3d gradNorm = n*($cr->$X.x-($cl->$X.x+L_v*dot(gradTan,delta)) )*rdist ;
    $gradv3d_f(X).x = gradTan + gradNorm ;

    gl = $cl->$gradv3d(X).y ;
    gr = $cr->$gradv3d(X).y ;
    L_v = $cl->$limiterv3d(X).y*$cr->$limiterv3d(X).y ;
    gradAvg = (gr*vl+gl*vr)*dvrvl ;
    gradTan = gradAvg-dot(gradAvg,n)*n ;
    gradNorm = n*($cr->$X.y-($cl->$X.y + L_v*dot(gradTan,delta)) )*rdist ;
    $gradv3d_f(X).y  = gradTan + gradNorm ;

    gl = $cl->$gradv3d(X).z ;
    gr = $cr->$gradv3d(X).z ;
    L_v = $cl->$limiterv3d(X).z*$cr->$limiterv3d(X).z ;
    gradAvg = (gr*vl+gl*vr)*dvrvl ;
    gradTan = gradAvg-dot(gradAvg,n)*n ;
    gradNorm = n*($cr->$X.z-($cl->$X.z + L_v*dot(gradTan,delta)) )*rdist ;
    $gradv3d_f(X).z  = gradTan + gradNorm ;
  }

  $rule pointwise(gradv3d_f(X)<-cl->(X,cellcenter,gradv3d(X)),X_f,facecenter,
                  cl->limiterv3d(X),area),
    constraint(limitedFaceStencil,ci->X) {
    const vect3d delta = $facecenter-$cl->$cellcenter ;
    const vect3d n = $area.n ;
    const real rdist = 1./dot(delta,n) ;

    real lim = $cl->$limiterv3d(X).x ;
    vect3d gradAvg = $cl->$gradv3d(X).x ;
    vect3d gradTan = gradAvg-dot(gradAvg,n)*n ;
    vect3d gradNorm = n*( $X_f.x-($cl->$X.x+lim*dot(gradTan,delta)) )*rdist ;
    $gradv3d_f(X).x = gradTan + gradNorm ;

    lim = $cl->$limiterv3d(X).y ;
    gradAvg = $cl->$gradv3d(X).y ;
    gradTan = gradAvg-dot(gradAvg,n)*n ;
    gradNorm = n*( $X_f.y-($cl->$X.y+lim*dot(gradTan,delta)) )*rdist ;
    $gradv3d_f(X).y = gradTan + gradNorm ;

    lim = $cl->$limiterv3d(X).z ;
    gradAvg = $cl->$gradv3d(X).z ;
    gradTan = gradAvg-dot(gradAvg,n)*n ;
    gradNorm = n*( $X_f.z-($cl->$X.z+lim*dot(gradTan,delta)) )*rdist ;
    $gradv3d_f(X).z = gradTan + gradNorm ;
  }

  // Centered Face Gradients
  $type X store<real_t> ;
  $type X_f store<real_t> ;

  $rule pointwise(grads_f(X)<-(cl,cr)->(X,cellcenter,limiters(X),grads(X)),
                  face2node->pos,facecenter,area),
    constraint(centeredFaceStencil,(cl,cr)->cellcenter) {
    const int sz = $face2node.size() ;
    // compute projected distance between cells
    real_t len = dot($cr->$cellcenter-$cl->$cellcenter,$area.n) ;
    // Compute centered control points above and below the face
    const vector3d<real_t> center_l = $facecenter-.5*len*$area.n ;
    const vector3d<real_t> center_r = $facecenter+.5*len*$area.n ;
    
    vector3d<real_t> grad_l = $cl->$grads(X) ;
    vector3d<real_t> grad_r = $cr->$grads(X) ;
    real_t lim_l = $cl->$limiters(X) ;
    real_t lim_r = $cr->$limiters(X) ;

    // Compute values at control points above and below face using limiters
    real_t X_l = $cl->$X + lim_l*dot(grad_l,(center_l-$cl->$cellcenter)) ;
    real_t X_r = $cr->$X + lim_r*dot(grad_r,(center_r-$cr->$cellcenter)) ;
      
    vector3d<real_t> sum = vector3d<real_t>(0,0,0) ;
    real_t lvol = 0 ;


    // Use greens theorem to compute gradient about centered control volume
    // Should be second order accurate
    for(int i=0;i<sz;++i) {
      int n1 = i ;
      int n2 = (i+1)%sz ;
      vector3d<real_t> p1 = $face2node[n1]->$pos ;
      vector3d<real_t> p2 = $face2node[n2]->$pos ;
      const real_t X1 = .5*($cl->$X+dot(grad_l,p1-$cl->$cellcenter) +
                            $cr->$X+dot(grad_r,p1-$cr->$cellcenter)) ;
      const real_t X2 = .5*($cl->$X+dot(grad_l,p2-$cl->$cellcenter) +
                            $cr->$X+dot(grad_r,p2-$cr->$cellcenter)) ;
      // 2*dot(A,n)
      const vector3d<real_t> v1l = p1-center_l ;
      const vector3d<real_t> v2l = p2-center_l ;
      sum -= (X_l+X1+X2)*cross(v1l,v2l) ;
      const vector3d<real_t> v1r = p1-center_r ;
      const vector3d<real_t> v2r = p2-center_r ;
      const vector3d<real_t> crossr = cross(v1r,v2r) ;
      sum += (X_r+X1+X2)*crossr ;
      lvol += dot(center_r-center_l,crossr) ;
    }
    $grads_f(X) = sum/lvol ;
  }
        

  $rule pointwise(grads_f(X)<-area,ci->(X,cellcenter,grads(X),limiters(X)),
                  X_f,facecenter, face2node->pos),
    constraint(centeredFaceStencil,ci->cellcenter) {

    const vector3d<real_t> n = $area.n ;
    real_t len = dot($facecenter-$ci->$cellcenter,n) ;
    const vector3d<real_t> center_l = $facecenter - len*n ;

    real_t X_l = $ci->$X +
      $ci->$limiters(X)*dot($ci->$grads(X),center_l-$ci->$cellcenter) ;
    const real rdist = 1./len ;
    const vect3d gradAvg = $ci->$grads(X) ;
    const vect3d gradTan = gradAvg-dot(gradAvg,n)*n ;
    const vect3d gradNorm = n*($X_f-X_l)*rdist ;

    $grads_f(X) = gradTan + gradNorm ;
  }

  $type X storeVec<real_t> ;
  $type X_f storeVec<real_t> ;

  $rule pointwise(gradv_f(X)<-(cl,cr)->(X,cellcenter,limiterv(X),gradv(X)),
                  face2node->pos,facecenter,area),
    constraint(centeredFaceStencil,(cl,cr)->cellcenter), prelude {
    $gradv_f(X).setVecSize($X.vecSize()) ;
  } compute {
    const int sz = $face2node.size() ;
    // compute projected distance between cells
    real_t len = dot($cr->$cellcenter-$cl->$cellcenter,$area.n) ;
    // Compute centered control points above and below the face
    const vector3d<real_t> center_l = $facecenter-.5*len*$area.n ;
    const vector3d<real_t> center_r = $facecenter+.5*len*$area.n ;
    

    int vs = $*X.vecSize() ;
    for(int b=0;b<vs;++b) {
      // Compute values at control points above and below face using limiterv
      vector3d<real_t> grad_l = $cl->$gradv(X)[b] ;
      vector3d<real_t> grad_r = $cr->$gradv(X)[b] ;
      real_t lim_l = $cl->$limiterv(X)[b] ;
      real_t lim_r = $cr->$limiterv(X)[b] ;
      real_t X_l = $cl->$X[b] + lim_l*dot(grad_l,(center_l-$cl->$cellcenter)) ;
      real_t X_r = $cr->$X[b] + lim_r*dot(grad_r,(center_r-$cr->$cellcenter)) ;
      
      vector3d<real_t> sum = vector3d<real_t>(0,0,0) ;
      real_t lvol = 0 ;


      // Use greens theorem to compute gradient about centered control volume
      // Should be second order accurate
      for(int i=0;i<sz;++i) {
        int n1 = i ;
        int n2 = (i+1)%sz ;
        vector3d<real_t> p1 = $face2node[n1]->$pos ;
        vector3d<real_t> p2 = $face2node[n2]->$pos ;
        const real_t X1 = .5*($cl->$X[b]+dot(grad_l,p1-$cl->$cellcenter) +
                              $cr->$X[b]+dot(grad_r,p1-$cr->$cellcenter)) ;
        const real_t X2 = .5*($cl->$X[b]+dot(grad_l,p2-$cl->$cellcenter) +
                              $cr->$X[b]+dot(grad_r,p2-$cr->$cellcenter)) ;
        // 2*dot(A,n)
        const vector3d<real_t> v1l = p1-center_l ;
        const vector3d<real_t> v2l = p2-center_l ;
        sum -= (X_l+X1+X2)*cross(v1l,v2l) ;
        const vector3d<real_t> v1r = p1-center_r ;
        const vector3d<real_t> v2r = p2-center_r ;
        const vector3d<real_t> crossr = cross(v1r,v2r) ;
        sum += (X_r+X1+X2)*crossr ;
        lvol += dot(center_r-center_l,crossr) ;
      }
      $gradv_f(X)[b] = sum/lvol ;
    }
  }

        

  $rule pointwise(gradv_f(X)<-area,ci->(X,cellcenter,gradv(X),limiterv(X)),
                  X_f,facecenter, face2node->pos),
      constraint(centeredFaceStencil,ci->cellcenter), prelude {
    $gradv_f(X).setVecSize($X.vecSize()) ;
  } compute {

    const vector3d<real_t> n = $area.n ;
    real_t len = dot($facecenter-$ci->$cellcenter,n) ;
    const vector3d<real_t> center_l = $facecenter - len*n ;

    int vs = $*X.vecSize() ;
    for(int b=0;b<vs;++b) {
      real_t X_l = $ci->$X[b] +
        $ci->$limiterv(X)[b]*dot($ci->$gradv(X)[b],center_l-$ci->$cellcenter) ;
      const real rdist = 1./len ;
      const vect3d gradAvg = $ci->$gradv(X)[b] ;
      const vect3d gradTan = gradAvg-dot(gradAvg,n)*n ;
      const vect3d gradNorm = n*($X_f[b]-X_l)*rdist ;

      $gradv_f(X)[b] = gradTan + gradNorm ;
    }
  }

  $type X store<vector3d<real_t> > ;
  $type X_f store<vector3d<real_t> > ;


  $rule pointwise(gradv3d_f(X)<-(cl,cr)->(X,cellcenter,limiterv3d(X),gradv3d(X)),
                  face2node->pos,facecenter,area),
    constraint(centeredFaceStencil,(cl,cr)->cellcenter) {
    const int sz = $face2node.size() ;
    // compute projected distance between cells
    real_t len = dot($cr->$cellcenter-$cl->$cellcenter,$area.n) ;
    // Compute centered control points above and below the face
    const vector3d<real_t> center_l = $facecenter-.5*len*$area.n ;
    const vector3d<real_t> center_r = $facecenter+.5*len*$area.n ;

    // do x, then y, then z
    
    vector3d<real_t> grad_l = $cl->$gradv3d(X).x ;
    vector3d<real_t> grad_r = $cr->$gradv3d(X).x ;
    real_t lim_l = $cl->$limiterv3d(X).x ;
    real_t lim_r = $cr->$limiterv3d(X).x ;

    // Compute values at control points above and below face using limiterv3d
    real_t X_l = $cl->$X.x + lim_l*dot(grad_l,(center_l-$cl->$cellcenter)) ;
    real_t X_r = $cr->$X.x + lim_r*dot(grad_r,(center_r-$cr->$cellcenter)) ;
      
    vector3d<real_t> sum = vector3d<real_t>(0,0,0) ;
    real_t lvol = 0 ;


    // Use greens theorem to compute gradient about centered control volume
    // Should be second order accurate
    for(int i=0;i<sz;++i) {
      int n1 = i ;
      int n2 = (i+1)%sz ;
      vector3d<real_t> p1 = $face2node[n1]->$pos ;
      vector3d<real_t> p2 = $face2node[n2]->$pos ;
      const real_t X1 = .5*($cl->$X.x+dot(grad_l,p1-$cl->$cellcenter) +
                            $cr->$X.x+dot(grad_r,p1-$cr->$cellcenter)) ;
      const real_t X2 = .5*($cl->$X.x+dot(grad_l,p2-$cl->$cellcenter) +
                            $cr->$X.x+dot(grad_r,p2-$cr->$cellcenter)) ;
      // 2*dot(A,n)
      const vector3d<real_t> v1l = p1-center_l ;
      const vector3d<real_t> v2l = p2-center_l ;
      sum -= (X_l+X1+X2)*cross(v1l,v2l) ;
      const vector3d<real_t> v1r = p1-center_r ;
      const vector3d<real_t> v2r = p2-center_r ;
      const vector3d<real_t> crossr = cross(v1r,v2r) ;
      sum += (X_r+X1+X2)*crossr ;
      lvol += dot(center_r-center_l,crossr) ;
    }
    $gradv3d_f(X).x = sum/lvol ;

    // now y
    grad_l = $cl->$gradv3d(X).y ;
    grad_r = $cr->$gradv3d(X).y ;
    lim_l = $cl->$limiterv3d(X).y ;
    lim_r = $cr->$limiterv3d(X).y ;

    // Compute values at control points above and below face using limiterv3d
    X_l = $cl->$X.y + lim_l*dot(grad_l,(center_l-$cl->$cellcenter)) ;
    X_r = $cr->$X.y + lim_r*dot(grad_r,(center_r-$cr->$cellcenter)) ;
      
    sum = vector3d<real_t>(0,0,0) ;


    // Use greens theorem to compute gradient about centered control volume
    // Should be second order accurate
    for(int i=0;i<sz;++i) {
      int n1 = i ;
      int n2 = (i+1)%sz ;
      vector3d<real_t> p1 = $face2node[n1]->$pos ;
      vector3d<real_t> p2 = $face2node[n2]->$pos ;
      const real_t X1 = .5*($cl->$X.y+dot(grad_l,p1-$cl->$cellcenter) +
                            $cr->$X.y+dot(grad_r,p1-$cr->$cellcenter)) ;
      const real_t X2 = .5*($cl->$X.y+dot(grad_l,p2-$cl->$cellcenter) +
                            $cr->$X.y+dot(grad_r,p2-$cr->$cellcenter)) ;
      // 2*dot(A,n)
      const vector3d<real_t> v1l = p1-center_l ;
      const vector3d<real_t> v2l = p2-center_l ;
      sum -= (X_l+X1+X2)*cross(v1l,v2l) ;
      const vector3d<real_t> v1r = p1-center_r ;
      const vector3d<real_t> v2r = p2-center_r ;
      const vector3d<real_t> crossr = cross(v1r,v2r) ;
      sum += (X_r+X1+X2)*crossr ;
    }
    $gradv3d_f(X).y = sum/lvol ;

    // now z
    grad_l = $cl->$gradv3d(X).z ;
    grad_r = $cr->$gradv3d(X).z ;
    lim_l = $cl->$limiterv3d(X).z ;
    lim_r = $cr->$limiterv3d(X).z ;

    // Compute values at control points above and below face using limiterv3d
    X_l = $cl->$X.z + lim_l*dot(grad_l,(center_l-$cl->$cellcenter)) ;
    X_r = $cr->$X.z + lim_r*dot(grad_r,(center_r-$cr->$cellcenter)) ;
      
    sum = vector3d<real_t>(0,0,0) ;


    // Use greens theorem to compute gradient about centered control volume
    // Should be second order accurate
    for(int i=0;i<sz;++i) {
      int n1 = i ;
      int n2 = (i+1)%sz ;
      vector3d<real_t> p1 = $face2node[n1]->$pos ;
      vector3d<real_t> p2 = $face2node[n2]->$pos ;
      const real_t X1 = .5*($cl->$X.z+dot(grad_l,p1-$cl->$cellcenter) +
                            $cr->$X.z+dot(grad_r,p1-$cr->$cellcenter)) ;
      const real_t X2 = .5*($cl->$X.z+dot(grad_l,p2-$cl->$cellcenter) +
                            $cr->$X.z+dot(grad_r,p2-$cr->$cellcenter)) ;
      // 2*dot(A,n)
      const vector3d<real_t> v1l = p1-center_l ;
      const vector3d<real_t> v2l = p2-center_l ;
      sum -= (X_l+X1+X2)*cross(v1l,v2l) ;
      const vector3d<real_t> v1r = p1-center_r ;
      const vector3d<real_t> v2r = p2-center_r ;
      const vector3d<real_t> crossr = cross(v1r,v2r) ;
      sum += (X_r+X1+X2)*crossr ;
    }
    $gradv3d_f(X).z = sum/lvol ;

  }

        

  $rule pointwise(gradv3d_f(X)<-area,ci->(X,cellcenter,gradv3d(X),limiterv3d(X)),
                  X_f,facecenter, face2node->pos),
    constraint(centeredFaceStencil,ci->cellcenter) {

    const vector3d<real_t> n = $area.n ;
    const real_t len = dot($facecenter-$ci->$cellcenter,n) ;
    const vector3d<real_t> center_l = $facecenter - len*n ;
    const real rdist = 1./len ;

    // for x
    real_t X_l = $ci->$X.x +
      $ci->$limiterv3d(X).x*dot($ci->$gradv3d(X).x,center_l-$ci->$cellcenter) ;
    vect3d gradAvg = $ci->$gradv3d(X).x ;
    vect3d gradTan = gradAvg-dot(gradAvg,n)*n ;
    vect3d gradNorm = n*($X_f.x-X_l)*rdist ;

    $gradv3d_f(X).x = gradTan + gradNorm ;

    // for y
    X_l = $ci->$X.y +
      $ci->$limiterv3d(X).y*dot($ci->$gradv3d(X).y,center_l-$ci->$cellcenter) ;

    gradAvg = $ci->$gradv3d(X).y ;
    gradTan = gradAvg-dot(gradAvg,n)*n ;
    gradNorm = n*($X_f.y-X_l)*rdist ;

    $gradv3d_f(X).y = gradTan + gradNorm ;

    // for z
    X_l = $ci->$X.z +
      $ci->$limiterv3d(X).z*dot($ci->$gradv3d(X).z,center_l-$ci->$cellcenter) ;

    gradAvg = $ci->$gradv3d(X).z ;
    gradTan = gradAvg-dot(gradAvg,n)*n ;
    gradNorm = n*($X_f.z-X_l)*rdist ;

    $gradv3d_f(X).z = gradTan + gradNorm ;
  }
  
}
