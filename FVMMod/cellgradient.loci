//#############################################################################
//#
//# Copyright 2008-2019, Mississippi State University
//#
//# This file is part of the Loci Framework.
//#
//# The Loci Framework is free software: you can redistribute it and/or modify
//# it under the terms of the Lesser GNU General Public License as published by
//# the Free Software Foundation, either version 3 of the License, or
//# (at your option) any later version.
//#
//# The Loci Framework is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# Lesser GNU General Public License for more details.
//#
//# You should have received a copy of the Lesser GNU General Public License
//# along with the Loci Framework.  If not, see <http://www.gnu.org/licenses>
//#
//#############################################################################
#include <Loci.h>
$include "FVM.lh"

namespace Loci {

  $type gradStencil param<std::string> ;
  
  $rule default(gradStencil),
    comments("Select stencil used for computing gradients.  Options include 'standard', 'stable', and 'green'.  Standard includes cells that share a face, while the stable stencil includes any cell that satisfies geometric requirements of cell face reconstructions, and 'green' implements a green's theorem gradient.")
  {
    $gradStencil = "standard" ;
  }

  $type stencilStandard Constraint ;
  $type useCellStencil Constraint ;
  $type greensGradient Constraint ;
 
  $rule constraint(stencilStandard,useCellStencil,greensGradient<-gradStencil) {
    $stencilStandard = EMPTY ;
    $useCellStencil = EMPTY ;
    $greensGradient = EMPTY ;
    if($gradStencil == "standard") {
      $stencilStandard = $*gradStencil.domain() ;
    } else if($gradStencil == "full" || $gradStencil == "stable") {
      $useCellStencil = $*gradStencil.domain() ;
    } else if($gradStencil == "green") {
      $greensGradient = $*gradStencil.domain() ;
    }else {
      cerr << "gradStencil " << $gradStencil << " of unknown type" << endl ;
      Loci::Abort() ;
    }
  }

  $type X storeVec<real_t> ;
  $type X_f storeVec<real_t> ;
  
  $rule pointwise(gradv(X)<-(lower,upper)->(cl,cr)->(X,vol),(lower,upper)->area,boundary_map->(X_f,area),vol),
                                constraint(geom_cells,greensGradient), prelude {
    $gradv(X).setVecSize($X.vecSize()) ;
  } compute {
    const real_t rvol = 1./$vol ;
    const int vs = $*X.vecSize() ;
    for(int i=0;i<vs;++i) {
      vector3d<real_t> gradsum = vector3d<real_t>(0.0,0.0,0.0);
      for(const Entity *li = $lower.begin();li!=$lower.end();++li) {
        const real_t vl = li->$cl->$vol ;
        const real_t vr = li->$cr->$vol ;
        const real_t xf = (li->$cl->$X[i]*vr+li->$cr->$X[i]*vl)/(vl+vr) ;
        gradsum -= xf*li->$area.sada*li->$area.n ;
      }
      for(const Entity *ui = $upper.begin();ui!=$upper.end();++ui) {
        const real_t vl = ui->$cl->$vol ;
        const real_t vr = ui->$cr->$vol ;
        const real_t xf = (ui->$cl->$X[i]*vr+ui->$cr->$X[i]*vl)/(vl+vr) ;
        gradsum += xf*ui->$area.sada*ui->$area.n ;
      }
      for(const Entity *bi = $boundary_map.begin();bi!=$boundary_map.end();
          ++bi) {
        gradsum += bi->$X_f[i]*bi->$area.sada*bi->$area.n ;
      }

      $gradv(X)[i] = gradsum*rvol  ; 
    }
  }

  $type X store<real_t> ;
  $type X_f store<real_t> ;

  $rule pointwise(grads(X)<-(lower,upper)->(cl,cr)->(X,vol),(lower,upper)->area,boundary_map->(X_f,area),vol),
    constraint(geom_cells,greensGradient) {
    const real_t rvol = 1./$vol ;
    vector3d<real_t> gradsum = vector3d<real_t>(0.0,0.0,0.0);
    for(const Entity *li = $lower.begin();li!=$lower.end();++li) {
      const real_t vl = li->$cl->$vol ;
      const real_t vr = li->$cr->$vol ;
      const real_t xf = (li->$cl->$X*vr+li->$cr->$X*vl)/(vl+vr) ;
      gradsum -= xf*li->$area.sada*li->$area.n ;
    }
    for(const Entity *ui = $upper.begin();ui!=$upper.end();++ui) {
      const real_t vl = ui->$cl->$vol ;
      const real_t vr = ui->$cr->$vol ;
      const real_t xf = (ui->$cl->$X*vr+ui->$cr->$X*vl)/(vl+vr) ;
      gradsum += xf*ui->$area.sada*ui->$area.n ;
    }
    for(const Entity *bi = $boundary_map.begin();bi!=$boundary_map.end();
        ++bi) {
      gradsum += bi->$X_f*bi->$area.sada*bi->$area.n ;
    }
    
    $grads(X)= gradsum*rvol  ; 
  }


  $type X store<vector3d<real_t> > ;
  $type X_f store<vector3d<real_t> > ;
  
  $rule pointwise(gradv3d(X)<-(lower,upper)->(cl,cr)->(X,vol),(lower,upper)->area,boundary_map->(X_f,area),vol),
    constraint(geom_cells,greensGradient) {
    tensor3d<real_t>  gradsum = tensor3d<real_t> (vector3d<real_t>(0,0,0),vector3d<real_t>(0,0,0),vector3d<real_t>(0,0,0)) ;
    const real_t rvol = 1./$vol ;
    
    for(const Entity *li = $lower.begin();li!=$lower.end();++li) {
      const real_t vl = li->$cl->$vol ;
      const real_t vr = li->$cr->$vol ;
      const vector3d<real_t> xf = (li->$cl->$X*vr+li->$cr->$X*vl)/(vl+vr) ;
      gradsum.x -= xf.x*li->$area.sada*li->$area.n ;
      gradsum.y -= xf.y*li->$area.sada*li->$area.n ;
      gradsum.z -= xf.z*li->$area.sada*li->$area.n ;
    }
    for(const Entity *ui = $upper.begin();ui!=$upper.end();++ui) {
      const real_t vl = ui->$cl->$vol ;
      const real_t vr = ui->$cr->$vol ;
      const vector3d<real_t> xf = (ui->$cl->$X*vr+ui->$cr->$X*vl)/(vl+vr) ;
      gradsum.x += xf.x*ui->$area.sada*ui->$area.n ;
      gradsum.y += xf.y*ui->$area.sada*ui->$area.n ;
      gradsum.z += xf.z*ui->$area.sada*ui->$area.n ;
    }
    for(const Entity *bi = $boundary_map.begin();bi!=$boundary_map.end();
        ++bi) {
      gradsum.x += bi->$X_f.x*bi->$area.sada*bi->$area.n ;
      gradsum.y += bi->$X_f.y*bi->$area.sada*bi->$area.n ;
      gradsum.z += bi->$X_f.z*bi->$area.sada*bi->$area.n ;
    }

    $gradv3d(X).x = gradsum.x*rvol  ; 
    $gradv3d(X).y = gradsum.y*rvol  ; 
    $gradv3d(X).z = gradsum.z*rvol  ; 
  }

  namespace {
    void computeWeights(vector3d<real_t> *wvec, const vector3d<real_t> *deltas, const real_t *areas,
                        int ndeltas) {
      tmp_array<vector3d<real_t> > weights(ndeltas) ;

      real_t r[3][3] ;
      r[0][0] = 0 ;
      for(int i=0;i<ndeltas;++i) {
        r[0][0] += deltas[i].x*deltas[i].x ;
        weights[i] = deltas[i] ;
      }
      r[0][0] = sqrt(r[0][0]) ;
      r[0][0] = max(r[0][0],real_t(1e-30)) ;

      const real_t rr00 = 1./r[0][0] ;
      for(int i=0;i<ndeltas;++i)
        weights[i].x *= rr00 ;
      r[0][1] = 0 ;
      for(int i=0;i<ndeltas;++i)
        r[0][1] += weights[i].x*weights[i].y ;
      for(int i=0;i<ndeltas;++i)
        weights[i].y -= r[0][1]*weights[i].x ;
      r[0][2] = 0 ;
      for(int i=0;i<ndeltas;++i)
        r[0][2] += weights[i].x*weights[i].z ;
      for(int i=0;i<ndeltas;++i)
        weights[i].z -= r[0][2]*weights[i].x ;
      r[1][1] = 0 ;
      for(int i=0;i<ndeltas;++i)
        r[1][1] += weights[i].y*weights[i].y ;
      r[1][1] = sqrt(r[1][1]) ;
      r[1][1] = max(r[1][1],real_t(1e-30)) ;
      const real_t rr11 = 1./r[1][1] ;
      for(int i=0;i<ndeltas;++i)
        weights[i].y *= rr11 ;

      r[1][2] = 0 ;
      for(int i=0;i<ndeltas;++i)
        r[1][2] += weights[i].y*weights[i].z ;
      for(int i=0;i<ndeltas;++i)
        weights[i].z -= r[1][2]*weights[i].y ;
      r[2][2] = 0 ;
      for(int i=0;i<ndeltas;++i)
        r[2][2] += weights[i].z*weights[i].z ;
      r[2][2] = sqrt(r[2][2]) ;
      r[2][2] = max(r[2][2],real_t(1e-30)) ;
      const real_t rr22 = 1./r[2][2] ;
      for(int i=0;i<ndeltas;++i)
        weights[i].z *= rr22 ;
      // Compute R inverse
      //
      // Rinv[0] = R^-1[0][0]
      // Rinv[1] = R^-1[0][1]
      // Rinv[2] = R^-1[0][2]
      // Rinv[3] = R^-1[1][1]
      // Rinv[4] = R^-1[1][2]
      // Rinv[5] = R^-1[2][2]
      real_t Rinv[6] ;
      Rinv[0] = rr00 ;
      Rinv[1] = -r[0][1]*rr00*rr11 ;
      Rinv[2] = (r[0][1]*r[1][2]-r[0][2]*r[1][1])*rr00*rr11*rr22 ;
      Rinv[3] = rr11 ;
      Rinv[4] = -r[1][2]*rr11*rr22 ;
      Rinv[5] = rr22 ;

      for(int i=0;i<ndeltas;++i) {
        real_t weightx = Rinv[0]*weights[i].x + Rinv[1]*weights[i].y +
          Rinv[2]*weights[i].z ;
        real_t weighty = Rinv[3]*weights[i].y + Rinv[4]*weights[i].z ;
        real_t weightz = Rinv[5]*weights[i].z ;
        wvec[i] = vector3d<real_t>(weightx,weighty,weightz)*areas[i] ;
      }
    }
  }


  $type Wf_l store<vector3d<real_t> > ;
  $type Wf_r store<vector3d<real_t> > ;

  $rule pointwise(lower->Wf_r,upper->Wf_l,boundary_map->Wf_l<-cellcenter,
		  lower->cl->cellcenter,upper->cr->cellcenter,
		  boundary_map->facecenter,(lower,upper,boundary_map)->area),
    constraint(geom_cells,cartesianCoordinateModel) {
    const int lsz = $lower.size() ;
    const int usz = $upper.size() ;
    const int bsz = $boundary_map.size() ;
    const int ndeltas = lsz+usz+bsz ;

    tmp_array<vector3d<real_t> > deltas(ndeltas) ;
    tmp_array<vector3d<real_t> > weights(ndeltas) ;
    tmp_array<real_t> areas(ndeltas) ;
    const vector3d<real_t> center = $cellcenter ;
    int ncount = 0 ;
    for(int i=0;i<lsz;++i) {
      const real_t W = $lower[i]->$area.sada ;
      areas[ncount] = W ;
      deltas[ncount++] = W*($lower[i]->$cl->$cellcenter - center) ;
      }
    for(int i=0;i<usz;++i) {
      const real_t W = $upper[i]->$area.sada ;
      areas[ncount] = W ;
      deltas[ncount++] = W*($upper[i]->$cr->$cellcenter - center) ;
    }
    for(int i =0;i<bsz;++i) {
      const real_t W = $boundary_map[i]->$area.sada ;
      areas[ncount] = W ;
      deltas[ncount++] = W*($boundary_map[i]->$facecenter - center) ;
    }

    tmp_array<vector3d<real_t> > wvec(ndeltas) ;

    computeWeights(wvec,deltas,areas,ndeltas) ;
    
    ncount = 0 ;

    for(int i=0;i<lsz;++i) {
      $lower[i]->$Wf_r = wvec[ncount++] ;
    }
    for(int i=0;i<usz;++i) {
      $upper[i]->$Wf_l = wvec[ncount++] ;
    }
    for(int i =0;i<bsz;++i) {
      $boundary_map[i]->$Wf_l = wvec[ncount++] ;
    }
  }

  $rule pointwise(lower->Wf_r,upper->Wf_l,boundary_map->Wf_l<-cellcenter,
		  lower->cl->cellcenter,upper->cr->cellcenter,
		  boundary_map->facecenter),
    constraint(geom_cells,axisymmetricCoordinateModel) {
    const int lsz = $lower.size() ;
    const int usz = $upper.size() ;
    const int bsz = $boundary_map.size() ;
    const int ndeltas = lsz+usz+bsz ;

    tmp_array<vector3d<real_t> > deltas(ndeltas) ;
    tmp_array<vector3d<real_t> > weights(ndeltas) ;
    tmp_array<real_t> areas(ndeltas) ;
    const vector3d<real_t> center = $cellcenter ;
    int ncount = 0 ;
    for(int i=0;i<lsz;++i) {
      const vector3d<real_t> dv = ($lower[i]->$cl->$cellcenter - center) ;
      const real_t W = 1./norm(dv) ;
      areas[ncount] = W ;
      deltas[ncount++] = W*dv ;
      }
    for(int i=0;i<usz;++i) {
      const vector3d<real_t> dv = ($upper[i]->$cr->$cellcenter - center) ;
      const real_t W = 1./norm(dv) ;
      areas[ncount] = W ;
      deltas[ncount++] = W*dv ;
    }
    for(int i =0;i<bsz;++i) {
      const vector3d<real_t> dv = ($boundary_map[i]->$facecenter - center) ;
      const real_t W = 1./norm(dv) ;
      areas[ncount] = W ;
      deltas[ncount++] = W*dv ;
    }

    tmp_array<vector3d<real_t> > wvec(ndeltas) ;

    computeWeights(wvec,deltas,areas,ndeltas) ;
    
    ncount = 0 ;

    for(int i=0;i<lsz;++i) {
      $lower[i]->$Wf_r = wvec[ncount++] ;
    }
    for(int i=0;i<usz;++i) {
      $upper[i]->$Wf_l = wvec[ncount++] ;
    }
    for(int i =0;i<bsz;++i) {
      $boundary_map[i]->$Wf_l = wvec[ncount++] ;
    }
  }


  $type X store<real_t> ;
  $type X_f store<real_t> ;
  
  $rule pointwise(grads(X)<-lower->Wf_r,upper->Wf_l,boundary_map->Wf_l,
		  lower->cl->X,upper->cr->X,boundary_map->X_f,X),
    constraint(geom_cells,stencilStandard) {

    vector3d<real_t> Qt_b = vector3d<real_t>(0,0,0) ;
    real_t X_center = $X ;
    const int lsz = $lower.size() ;
    for(int i=0;i<lsz;++i) {
      real_t df = $lower[i]->$cl->$X - X_center ;
      Qt_b += df*$lower[i]->$Wf_r ;
    }
    const int usz = $upper.size() ;
    for(int i=0;i<usz;++i) {
      real_t df = $upper[i]->$cr->$X - X_center ;
      Qt_b += df*$upper[i]->$Wf_l ;
    }
    const int bsz = $boundary_map.size() ;
    for(int i=0;i<bsz;++i) {
      real_t df = $boundary_map[i]->$X_f - X_center ;
      Qt_b += df*$boundary_map[i]->$Wf_l ;
    }

    $grads(X) = Qt_b ; 
  }
    
  $type X store<vector3d<real_t> > ;
  $type X_f store<vector3d<real_t> > ;
  $rule pointwise(gradv3d(X)<-lower->Wf_r,upper->Wf_l,boundary_map->Wf_l,
		  lower->cl->X,upper->cr->X,boundary_map->X_f,X),
    constraint(geom_cells,stencilStandard) {

    tensor3d<real_t>  Qt_b = tensor3d<real_t> (vector3d<real_t>(0,0,0),
					       vector3d<real_t>(0,0,0),
					       vector3d<real_t>(0,0,0)) ;
    vector3d<real_t> X_center = $X ;
    const int lsz = $lower.size() ;
    for(int i=0;i<lsz;++i) {
      vector3d<real_t> df = $lower[i]->$cl->$X - X_center ;
      vector3d<real_t> Wr = $lower[i]->$Wf_r ;
      Qt_b.x += df.x*Wr ;
      Qt_b.y += df.y*Wr ;
      Qt_b.z += df.z*Wr ;
    }
    const int usz = $upper.size() ;
    for(int i=0;i<usz;++i) {
      vector3d<real_t> df = $upper[i]->$cr->$X - X_center ;
      vector3d<real_t> Wl = $upper[i]->$Wf_l ;
      Qt_b.x += df.x*Wl ;
      Qt_b.y += df.y*Wl ;
      Qt_b.z += df.z*Wl ;
    }
    const int bsz = $boundary_map.size() ;
    for(int i=0;i<bsz;++i) {
      vector3d<real_t> df = $boundary_map[i]->$X_f - X_center ;
      vector3d<real_t> Wl = $boundary_map[i]->$Wf_l ;
      Qt_b.x += df.x*Wl ;
      Qt_b.y += df.y*Wl ;
      Qt_b.z += df.z*Wl ;
    }

    $gradv3d(X) = Qt_b ; 
  }


  $type X storeVec<real_t> ;
  $type X_f storeVec<real_t> ;
  
  $rule pointwise(gradv(X)<-lower->Wf_r,upper->Wf_l,boundary_map->Wf_l,
		  lower->cl->X,upper->cr->X,boundary_map->X_f,X),
    constraint(geom_cells,stencilStandard),prelude {
    $gradv(X).setVecSize($X.vecSize()) ;
  } compute {
    int vs = $*X.vecSize()  ;
    for(int v=0;v<vs;++v)
      $gradv(X)[v] = vector3d<real_t>(0.,0.,0.) ;
    const int lsz = $lower.size() ;
    for(int i=0;i<lsz;++i) {
      const vector3d<real_t> Wr = $lower[i]->$Wf_r ;
      for(int v=0;v<vs;++v) {
	real_t df = $lower[i]->$cl->$X[v] - $X[v] ;
	$gradv(X)[v] += df*Wr ;
      }
    }
    const int usz = $upper.size() ;
    for(int i=0;i<usz;++i) {
      const vector3d<real_t> Wl = $upper[i]->$Wf_l ;
      for(int v=0;v<vs;++v) {
	real_t df = $upper[i]->$cr->$X[v] - $X[v] ;
	$gradv(X)[v] += df*Wl ;
      }
    }
    const int bsz = $boundary_map.size() ;
    for(int i=0;i<bsz;++i) {
      const vector3d<real_t> Wl = $boundary_map[i]->$Wf_l ;
      
      for(int v=0;v<vs;++v) {
	real_t df = $boundary_map[i]->$X_f[v] - $X[v] ;
	$gradv(X)[v] += df*Wl ;
      }
    }
  }
  

  $type periodicTransform store<rigid_transform> ;


  $type X store<real_t> ;
  
  $rule pointwise(cr->grads(X)<-pmap->cl->grads(X),
		  pmap->ref->periodicTransform),
    constraint(periodicFaces,cl->X) {
    const rigid_transform &frame = $pmap->$ref->$periodicTransform ;
    $cr->$grads(X) = frame.rotate_vec($pmap->$cl->$grads(X)) ;
  }

  $type X store<vector3d<real_t> > ;
  $rule pointwise(cr->gradv3d(X)<-pmap->cl->gradv3d(X),
		  pmap->ref->periodicTransform),
    constraint(periodicFaces,cl->X) {
    const rigid_transform &frame = $pmap->$ref->$periodicTransform ;
    $cr->$gradv3d(X) = frame.rotate_tensor($pmap->$cl->$gradv3d(X)) ;
  }
  
  $type X storeVec<real_t> ;
  $rule pointwise(cr->gradv(X)<-pmap->cl->gradv(X),
		  pmap->ref->periodicTransform),
    constraint(periodicFaces,cl->X) {
    const rigid_transform &frame = $pmap->$ref->$periodicTransform ;
    const int nv = $*gradv(X).vecSize() ;
    for(int i=0;i<nv;++i) {
      $cr->$gradv(X)[i] = frame.rotate_vec($pmap->$cl->$gradv(X)[i]) ;
    }
  }


  //==========================================================================
  //==
  //==  Experimental Stencil Code
  //==
  //==========================================================================
  

  void centerWeights(real_t *wcent, const vector3d<real_t> *deltas, int ndeltas) {
    for(int kk=0;kk<2;++kk) {
      vector3d<real_t> center = vector3d<real_t>(0.,0.,0.) ;
      for(int i=0;i<ndeltas;++i) {
        center += wcent[i]*deltas[i] ;
      }

      real_t r[4][4] ;
      for(int i=0;i<4;++i) {
        r[i][0] = 0.0 ;
        r[i][1] = 0.0 ;
        r[i][2] = 0.0 ;
        r[i][3] = 0.0 ;
      }
      real_t wtot = 0 ;
      for(int i=0;i<ndeltas;++i) {
        const real_t W = wcent[i] ;
        wtot+=W ;
        const real_t W2 = W*W ;
        r[0][0] += W2*deltas[i].x*deltas[i].x ;
        r[0][1] += W2*deltas[i].y*deltas[i].x ;
        r[0][2] += W2*deltas[i].z*deltas[i].x ;
        r[0][3] += W*deltas[i].x ;
        r[1][0] += W2*deltas[i].x*deltas[i].y ;
        r[1][1] += W2*deltas[i].y*deltas[i].y ;
        r[1][2] += W2*deltas[i].z*deltas[i].y ;
        r[1][3] += W*deltas[i].y ;
        r[2][0] += W2*deltas[i].x*deltas[i].z ;
        r[2][1] += W2*deltas[i].y*deltas[i].z ;
        r[2][2] += W2*deltas[i].z*deltas[i].z ;
        r[2][3] += W*deltas[i].z ;
        r[3][0] += W*deltas[i].x ;
        r[3][1] += W*deltas[i].y ;
        r[3][2] += W*deltas[i].z ;
        r[3][3] += W ;
      }
      real_t b[4] = {0.0,0.0,0.0,wtot} ;
      real_t y[4],x[4] ;
      for(int i=0;i<4;++i) {
        /* compute l_ij's */
        for(int j=i+1;j<4;++j) {
          r[j][i] = r[j][i]/r[i][i] ;
        }
        /* compute u_ij's */
        for(int j=i+1;j<4;++j)
          for(int k=i+1;k<4;++k)
            r[j][k] -= r[j][i]*r[i][k] ;
      }
      
      
      
      /* do forward solve Ly=b */
      for(int i=0;i<4;i++) {
        y[i] = b[i] ;
        for(int j=0;j<i;j++)
          y[i] -= r[i][j]*y[j] ;
      }
      
      /* do backward solve Ux=y */
      for(int i=3;i>=0;i--) {
        x[i] = y[i] ;
        for(int j=i+1;j<4;j++)
          x[i] -= r[i][j]*x[j] ;
        x[i] = x[i]/r[i][i] ;
      }
      
      vector3d<real_t> vx = vector3d<real_t>(x[0],x[1],x[2]) ;
      real_t k = x[3] ;
      real_t wsum = 0.0 ;
      vector3d<real_t> newcent = vector3d<real_t>(0.0,0.0,0.0) ;


      int badcount = 0 ;
      
      for(int i=0;i<ndeltas;++i) {
        real_t wadjust = k+dot(vx,wcent[i]*deltas[i]) ;
        wcent[i] *= max(wadjust,real_t(0.0)) ;
        if(wadjust < -0.0)
          badcount++ ;
        wsum += wcent[i] ;
        newcent += wcent[i]*deltas[i] ;
      }

      if(badcount ==0)
        return ;

      std::cout << "bad stencil, retrying" << endl ;
      std::cout << "badcount = " << badcount << endl ;
      std::cout << "cent = " << center << endl ;
      std::cout << "vx = " << vx  << ",k="<<k<<",wsum="<< wsum << ",newcent="<<
	newcent << endl;
      
    }
    cerr << "Warning: BAD STENCIL after second try " << endl ;
  }

  $type LSWeights multiStore<vector3d<real_t> > ;
  $type LSBWeights multiStore<vector3d<real_t> > ;
  $type cellStencil multiMap ;
  $rule pointwise(LSWeights,LSBWeights<-
		  (lower,upper,boundary_map)->(facecenter),
		  cellcenter,cellStencil->cellcenter,
		  boundary_map->facecenter), option(disable_threading),
  prelude {
    $LSWeights.setSizes($cellStencil) ;
    $LSBWeights.setSizes($boundary_map) ;
  } compute {
    int nstencil = $cellStencil.size() ;
    int nbcs =     $boundary_map.size() ;
    int ndeltas = nstencil+nbcs ;

    tmp_array<vector3d<real_t> > deltas(ndeltas) ;
    tmp_array<vector3d<real_t> > weights(ndeltas) ;
    tmp_array<real_t> areas(ndeltas) ;
    const vector3d<real_t> center = $cellcenter ;
    int ncount = 0 ;
    for(int i=0;i<nstencil;++i) {
      vector3d<real_t> diff = $cellStencil[i]->$cellcenter-center ;
      real_t rr = 1./norm(diff) ;
      areas[ncount] = rr ;
      deltas[ncount++] = rr*diff ;
    }

    for(int i=0;i<nbcs;++i) {
      vector3d<real_t> diff = $boundary_map[i]->$facecenter-center ;
      real_t rr = 1./norm(diff) ;
      areas[ncount] = rr ;
      deltas[ncount++] = rr*diff ;
    }
    tmp_array<vector3d<real_t> > wvec(ndeltas) ;
    tmp_array<real_t> wcent(ndeltas) ;

    // If this is defined, try to select the most suitable subset of points
    // for the stencil based on cell face normals
//#define SELECTIVE_STENCIL  
#ifdef SELECTIVE_STENCIL
    for(int i=0;i<ndeltas;++i)
      wcent[i] = 0.0 ;
    const int lsz = $lower.size() ;
    for(int i = 0;i<lsz; ++i) {
      //      vector3d<real_t> n = $lower[i]->$area.n ;
      vector3d<real_t> n = $lower[i]->$facecenter - center ;
      n *= 1./max(norm(n),1e-20) ;
      int mindir = 0 ;
      int maxdir = 0 ;
      real_t mindot = dot(n,deltas[0]) ;
      real_t maxdot = mindot ;
      
      for(int i=1;i<ndeltas;++i) {
	real_t dotnx = dot(n,deltas[i]) ;
	if(dotnx < mindot) {
	  mindot = dotnx ;
	  mindir = i ;
	}
	if(dotnx > maxdot) {
	  maxdot = dotnx ;
	  maxdir = i ;
	}
      }
      wcent[mindir] = 1.0 ;
      wcent[maxdir] = 1.0 ;
    }
    const int usz = $upper.size() ;
    for(int i=0;i<usz;++i) {
      vector3d<real_t> n = $upper[i]->$facecenter - center ;
      n *= 1./max(norm(n),1e-20) ;
      //      vector3d<real_t> n = $upper[i]->$area.n ;
      int mindir = 0 ;
      int maxdir = 0 ;
      real_t mindot = dot(n,deltas[0]) ;
      real_t maxdot = mindot ;
        
      for(int i=1;i<ndeltas;++i) {
	real_t dotnx = dot(n,deltas[i]) ;
	if(dotnx < mindot) {
	  mindot = dotnx ;
	  mindir = i ;
	}
	if(dotnx > maxdot) {
	  maxdot = dotnx ;
	  maxdir = i ;
	}
      }
      wcent[mindir] = 1.0 ;
      wcent[maxdir] = 1.0 ;
    }
    const int bsz = $boundary_map.size() ;
    for(int i=0;i<bsz;++i) {
      vector3d<real_t> n = $boundary_map[i]->$facecenter - center ;
      n *= 1./max(norm(n),1e-20) ;
      //      vector3d<real_t> n = $boundary_map[i]->$area.n ;
      int mindir = 0 ;
      int maxdir = 0 ;
      real_t mindot = dot(n,deltas[0]) ;
      real_t maxdot = mindot ;
        
      for(int i=1;i<ndeltas;++i) {
	real_t dotnx = dot(n,deltas[i]) ;
	if(dotnx < mindot) {
	  mindot = dotnx ;
	  mindir = i ;
	}
	if(dotnx > maxdot) {
	  maxdot = dotnx ;
	  maxdir = i ;
	}
      }
      wcent[mindir] = 1.0 ;
      wcent[maxdir] = 1.0 ;
    }
//    int ncnts = 0 ;
//    for(int i=0;i<ndeltas;++i)
//      if(wcent[i] > 0.01)
//	ncnts++ ;
//    std::cout << "ncnts = " << ncnts << "ndeltas=" << ndeltas << endl ;
#else
    for(int i=0;i<ndeltas;++i)
      wcent[i] = 1.0 ;
#endif
      
    //    centerWeights(wcent,deltas,ndeltas) ;

    for(int i=0;i<ndeltas;++i) {
      areas[i] *= wcent[i] ;
      deltas[i] *= wcent[i] ;
    }
      
    computeWeights(wvec,deltas,areas,ndeltas) ;
    
    ncount = 0 ;
    for(int i=0;i<nstencil;++i) 
      $LSWeights[i] = wvec[ncount++] ;
    for(int i=0;i<nbcs;++i)
      $LSBWeights[i] = wvec[ncount++] ;
  }

  $type X store<real_t> ;
  $type X_f store<real_t> ;
  
  $rule pointwise(grads(X)<-LSWeights,LSBWeights,cellStencil->X,
		  boundary_map->X_f,X),
    constraint(geom_cells,useCellStencil) {
    vector3d<real_t> Qt_b = vector3d<real_t>(0,0,0) ;
    real_t X_center = $X ;
    const int stsz = $cellStencil.size() ;
    for(int i=0;i<stsz;++i) {
      real_t df = $cellStencil[i]->$X - X_center ;
      Qt_b += df*$LSWeights[i] ;
    }
    const int bsz = $boundary_map.size() ;
    for(int i=0;i<bsz;++i) {
      real_t df = $boundary_map[i]->$X_f - X_center ;
      Qt_b += df*$LSBWeights[i] ;
    }

    $grads(X) = Qt_b ; 
  }
  
  $type X store<vector3d<real_t> > ;
  $type X_f store<vector3d<real_t> > ;
  
  $rule pointwise(gradv3d(X)<-LSWeights,LSBWeights,cellStencil->X,
		  boundary_map->X_f,X),
    constraint(geom_cells,useCellStencil) {
    tensor3d<real_t> Qt_b = tensor3d<real_t> (vector3d<real_t>(0,0,0),
					      vector3d<real_t>(0,0,0),
					      vector3d<real_t>(0,0,0)) ;


    vector3d<real_t> X_center = $X ;
    const int stsz = $cellStencil.size() ;
    for(int i=0;i<stsz;++i) {
      vector3d<real_t> df = $cellStencil[i]->$X - X_center ;
      Qt_b.x += df.x*$LSWeights[i] ;
      Qt_b.y += df.y*$LSWeights[i] ;
      Qt_b.z += df.z*$LSWeights[i] ;
    }
    const int bsz = $boundary_map.size() ;
    for(int i=0;i<bsz;++i) {
      vector3d<real_t> df = $boundary_map[i]->$X_f - X_center ;
      Qt_b.x += df.x*$LSWeights[i] ;
      Qt_b.y += df.y*$LSWeights[i] ;
      Qt_b.z += df.z*$LSWeights[i] ;
    }

    $gradv3d(X) = Qt_b ; 
  }
  

  $type X storeVec<real_t> ;
  $type X_f storeVec<real_t> ;
  
  $rule pointwise(gradv(X)<-LSWeights,LSBWeights,cellStencil->X,
		  boundary_map->X_f,X),
    constraint(geom_cells,useCellStencil), prelude {
    $gradv(X).setVecSize($X.vecSize()) ;
  } compute {
    const int vsz = $*X.vecSize() ;
    for(int i=0;i<vsz;++i)
      $gradv(X)[i] = vector3d<real_t>(0,0,0) ;
    const int stsz = $cellStencil.size() ;
    for(int i=0;i<stsz;++i) {
      for(int v=0;v<vsz;++v) {
	real_t df = $cellStencil[i]->$X[v] - $X[v] ;
	$gradv(X)[v] += df*$LSWeights[i] ;
      }
    }
    const int bsz = $boundary_map.size() ;
    for(int i=0;i<bsz;++i) {
      for(int v=0;v<vsz;++v) {
	real_t df = $boundary_map[i]->$X_f[v] - $X[v] ;
	$gradv(X)[v] += df*$LSBWeights[i] ;
      }
    }
  }
}
