//#############################################################################
//#
//# Copyright 2015-2019, Mississippi State University
//#
//# This file is part of the flowPsi computational fluid dynamics solver.
//#
//# The flowPsi solver is free software: you can redistribute it and/or modify
//# it under the terms of the GNU General Public License as published by
//# the Free Software Foundation, either version 3 of the License, or
//# (at your option) any later version.
//#
//# The flowPsi solver is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# GNU General Public License for more details.
//#
//# You should have received a copy of the GNU General Public License
//# along with the flowPsi solver.  If not, see <http://www.gnu.org/licenses>
//#
//#############################################################################

#include <Loci.h>
#include <Tools/fpe.h>
#include <Tools/parse.h>
#include <Tools/stream.h>
#include <docreport.h>

#include "flowTypes.h"
#include "readGrid.h"

#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>

#include <vector>

using std::vector ;


using flowPsi::read_grid ;


using Loci::storeRepP ;
using Loci::variableSet ;
using Loci::variable ;
using Loci::MPI_processes ;
using Loci::MPI_rank ;

void pretty_print_string(string i,string s, ostream &o) {
  o << i  << ": " ;

  size_t initial_space = i.size() + 2 ;
  size_t count = initial_space ;
  string current_word ;
  size_t loc = 0 ;
  do {
    current_word = "" ;
    while(loc < s.size() && s[loc] != ' ')
      current_word += s[loc++] ;
    if(loc < s.size()) 
      loc++ ;
    
    if(count+current_word.size() >= 79) {
      o << endl ;
      for(size_t t=0;t<initial_space; ++t)
        o << ' ' ;
      count = initial_space ;
    }
    o << current_word << ' ' ;
    count += current_word.size()+1 ;
  } while (loc < s.size()) ;
  o << endl ;
}

void describe_inputs(rule_db &rdb) {
  using namespace Loci ;
  fact_db local ;
  // first of all, we need to process the default and optional rules
  ruleSet special_rules = rdb.get_default_rules() ;
  // first we process the default rules
  cout << "------------------------------------------------------------------------------" << endl ;
  for(ruleSet::const_iterator ri=special_rules.begin();
      ri!=special_rules.end();++ri) {
    // first we need to create the facts in the fact_db
    variableSet targets = ri->targets() ;
    rule_implP rp = ri->get_rule_implP() ;
    for(variableSet::const_iterator vi=targets.begin();
        vi!=targets.end();++vi) {
      // we need to get the storeRep for this variable
      storeRepP srp = rp->get_store(*vi) ;
      if(srp == 0) {
        cerr << "rule " << *ri << " unable to provide type for " << *vi
             << endl ;
        exit(-1) ;
      }
      local.create_fact(*vi,srp) ;
    }
    // then we need to call the compute method to set
    // the default value for this variable
    rp->initialize(local) ;
    rp->compute(sequence(EMPTY)) ;
    for(variableSet::const_iterator vi=targets.begin();
        vi!=targets.end();++vi) {
      storeRepP srp = local.get_variable(*vi) ;
      cout << *vi << ": " ;
      srp->Print(cout) ;
      string comment = rp->get_comments() ;
      if(comment.size() != 0)
        pretty_print_string("comment",comment,cout) ;
        //        cout << "comment: " << rp->get_comments() << endl ;
      cout << "------------------------------------------------------------------------------" << endl ;
    }
      

  }
  // then we process the optional rules
  special_rules = rdb.get_optional_rules() ;
  for(ruleSet::const_iterator ri=special_rules.begin();
      ri!=special_rules.end();++ri) {
    // first we need to create the facts in the fact_db
    variableSet targets = ri->targets() ;
    rule_implP rp = ri->get_rule_implP() ;
    for(variableSet::const_iterator vi=targets.begin();
        vi!=targets.end();++vi) {
      cout << *vi << ": NO DEFAULT VALUE" << endl ;
      string comment = rp->get_comments() ;
      if(comment.size() != 0)
        pretty_print_string("comment",comment,cout) ;
      cout << "------------------------------------------------------------------------------" << endl ;
    }
  }

}

string extractCaseName(string input) {
  size_t dotloc = input.rfind(".") ;
  size_t slaloc = input.rfind("/") ;
  if(dotloc == string::npos) 
    dotloc = input.size() ;
  if(slaloc == string::npos)
    slaloc = 0 ;
  else
    slaloc++ ;
  
  if(dotloc < slaloc)
    dotloc = input.size() ;

  string result ;
  for(size_t i=slaloc;i<dotloc;++i)
    result += input[i] ;
  if(result == "") 
    result = "not" ;
  if(result == "..") 
    result = "dotdot" ;
  if(result ==".")
    result = "dot" ;

  return result ;
}


int main(int ac, char *av[]) {
  Loci::Init(&ac, &av) ;

#ifdef FLOWPSI_RPATH
  { string rpath = FLOWPSI_RPATH; Loci::AddModuleSearchDir(rpath) ; }
#endif
  // default query 
  string query = "solution" ;

  bool input_desc = false ;
  bool output_doc = false ;
  variableSet docvars ;
  bool dryrun = false ;
  vector<string> modulesToLoad ;
  string outputFile ;
  string message ;
  vector<pair<string,string> > command_vars ;
  
  string casename ;

  while(ac>=2 && av[1][0] == '-') {
    // If user specifies an alternate query, extract it from the
    // command line.
    if(ac >= 3 && !strcmp(av[1],"-q")) {
      query = av[2] ;
      ac -= 2 ;
      av += 2 ;
    } else if(ac >= 2 && !strcmp(av[1],"-v")) {
      cout << "Loci version: " << Loci::version() << endl ;
      if(ac == 2) {
        Loci::Finalize() ;
        exit(0) ;
      }
      ac-- ;
      av++ ;
    } else if(ac >= 2 && !strcmp(av[1],"-inputs")) {
      input_desc = true ;
      ac-- ;
      av++ ;
    } else if(ac >= 2 && !strcmp(av[1],"-doc")) {
      output_doc = true ;
      ac-- ;
      av++ ;
    } else if(ac >= 3 && !strcmp(av[1],"-docvar")) {
      output_doc = true ;
      docvars += variable(string(av[2])) ;
      ac -= 2 ;
      av += 2 ;
    } else if(ac >= 3 && !strcmp(av[1],"-load_module")) {
      modulesToLoad.push_back(string(av[2])) ;
      ac -= 2 ;
      av += 2 ;
    } else if(ac >= 2 && !strcmp(av[1],"-dryrun")) {
      dryrun = true ;
      ac-- ;
      av++ ;
    } else if(ac >=4 && !strcmp(av[1],"-set")) {
      string var = av[2] ;
      string setting = av[3] ;
      pair<string,string> pv(var,setting) ;
      command_vars.push_back(pv) ;
      av += 3 ;
      ac -= 3 ;
    } else if(ac >= 3 && !strcmp(av[1],"-o")) {
      outputFile = string(av[2]) ;
      ac -= 2 ;
      av += 2 ;
    } else if(ac >= 3 && !strcmp(av[1],"-m")) {
      message = string(av[2]) ;
      ac -= 2 ;
      av += 2 ;
    }
    else {
      cerr << "argument " << av[1] << " is not understood." << endl ;
      ac-- ;
      av++ ;
    }
  }

  // if output directory doesn't exist, create one
  struct stat statbuf ;
  int fid = open("output",O_RDONLY) ;
  if(fid < 0) {
    mkdir("output",0755) ;
  } else {
    fstat(fid,&statbuf) ;
    if(!S_ISDIR(statbuf.st_mode)) {
      cerr << "file 'output' should be a directory!, rename 'output' and start again."
           << endl ;
      Loci::Abort() ;
    }
    close(fid) ;
  }

  if(!stat("stop",&statbuf))
    ::unlink("stop") ;
  
  

  if(ac <= 1 && !input_desc && !output_doc) {
    cout << "Loci version: " << Loci::version() << endl ;
    Loci::Finalize() ;
    exit(0) ;
  }

  if(Loci::MPI_rank == 0) {
    cout << "Loci version: " << Loci::version() << endl ;
  }
  
  Loci::debugout << "Loci version: " << Loci::version() << endl ;



  if(ac > 1) {
    int av1sz = strlen(av[1]) ;
    if(av1sz>0 && (av[1][av1sz-1] == '.'))
      av[1][av1sz-1] = '\0' ;
  }
  
  rule_db rdb ;
  rdb.add_rules(global_rule_list) ;

  // read grid, connectivity information, and user supplied information into
  // the fact database
  fact_db facts ;

  Loci::load_module("fvm",rdb) ;

  string gridfile ;
  // Now look in vars file for directives to load in modules, or solid_heat
  if(ac > 1) {
    casename=extractCaseName(string(av[1]));
    gridfile = casename + ".vog" ;

    string varsfile = casename+string(".vars") ;
    try {
      ifstream ifile(varsfile.c_str(),ios::in) ;
      if(ifile.fail()) {
        //        cerr<<"can't open " << varsfile << endl ;
        //        Loci::Abort() ;
      } else {
        Loci::parse::kill_white_space(ifile) ;
        while(ifile.peek() != '{' && ifile.peek() != EOF) {
          if( Loci::parse::is_name(ifile) ) {
            string name = Loci::parse::get_name(ifile) ;
            Loci::parse::kill_white_space(ifile) ;
            if(ifile.peek() != ':') {
              cerr << "expected ':' after '" << name << "' in file \""
                   << varsfile << '"' << endl ;
              Loci::Abort() ;
            }
            ifile.get() ;
            Loci::parse::kill_white_space(ifile) ;
            string argument ;
            if(Loci::parse::is_string(ifile)) {
              argument = Loci::parse::get_string(ifile) ;
            } else if(Loci::parse::is_name(ifile)) {
              argument = Loci::parse::get_name(ifile) ;
            } else {
              cerr << "unable to parse argument to option '" << name
                   << "' in file \"" << varsfile << '"' << endl ;
              Loci::Abort() ;
            }
            if(name == "loadModule") {
              modulesToLoad.push_back(argument) ;
            } else if(name == "query") {
              query = argument ;
            } else if(name == "grid") {
              gridfile = argument ;
            } else if(name == "message") {
              message = argument ;
            } else {
              cerr << "unable to interpret preamble directive '"
                   << name << "' found in file \"" << varsfile << '"' << endl ;
              Loci::Abort() ;
            }
          } else {
            cerr << "problem parsing preamble of '" << varsfile << "'" << endl ;
            string s ;
            ifile >> s ;
            cerr << "problem near token '" << s << "'" << endl ;
            Loci::Abort() ;
          }
          Loci::parse::kill_white_space(ifile) ;
        }
      }
    } catch(const Loci::BasicException &err) {
      err.Print(cerr) ;
      cerr << "aborted reading \"" << varsfile << "\"" << endl ;
      Loci::Abort() ;
    }
  }
    
  if(modulesToLoad.size() > 0) {
    for(size_t i=0;i<modulesToLoad.size();++i) {
      Loci::exprP ep = Loci::expression::create(modulesToLoad[i]) ;
      string mod_name ;
      string mod_namespace ;
      string load_file ;
      std::set<std::string> str_set ;
      if(ep->op == Loci::OP_FUNC) {
        mod_name = ep->name ;
        //        mod_namespace = ep->name ;
        if(ep->expr_list.front()->op == Loci::OP_NAME)
          load_file = ep->expr_list.front()->name ;
        else
          cerr << "unable to interpret argument in " << modulesToLoad[i]
               << endl ;
      } else if(ep->op == Loci::OP_NAME) {
        mod_name = ep->name ;
      } else if(ep->op == Loci::OP_SCOPE) {
        Loci::exprList::const_iterator li ;
        bool first_time = true ;
        Loci::exprP last_ep = 0 ;
        for(li=ep->expr_list.begin();li!=ep->expr_list.end();++li) {
          if(!first_time) {
            if(last_ep->op == Loci::OP_NAME)
              if(mod_namespace == "")
                mod_namespace = last_ep->name ;
              else
                mod_namespace += string("_") + last_ep->name ;
            else
              cerr << "-load_module namespace not recognized" << endl ;
          }
          last_ep = *li ;
          first_time = false ;
        }
        ep = last_ep ;
        if(ep->op == Loci::OP_FUNC) {
          mod_name = ep->name ;
          if(ep->expr_list.front()->op == Loci::OP_NAME)
            load_file = ep->expr_list.front()->name ;
          else
            cerr << "unable to interpret argument in " << modulesToLoad[i]
                 << endl ;
        } else if(ep->op == Loci::OP_NAME) {
          mod_name = ep->name ;
        } else {
          cerr << "unable to interpret " << modulesToLoad[i] << endl ;
        }
      } else {
        cerr << "unable to interpret " << modulesToLoad[i] << endl ;
      }
      mod_name += "FPSI" ; // to keep this application modules
                          // names from overlapping with others
      Loci::load_module(mod_name,mod_namespace,
                        load_file.c_str(),facts,rdb,str_set) ;
    }
  }

  if(input_desc) {
    describe_inputs(rdb) ;
    Loci::Finalize() ;
    exit(0) ;
  }

  if(output_doc) {
    Loci::ruleDocumentation(rdb,docvars) ;
    Loci::Finalize() ;
    exit(0) ;
  }

  read_grid(facts,rdb,casename,command_vars,gridfile,dryrun) ;
    
  if(dryrun) {
    Loci::Finalize() ;
    exit(0) ; 
 }

  // Dump out parameters from fact database
  if(Loci::MPI_rank == 0) {
    char buf[512] ;
    bzero(buf,512) ;
    snprintf(buf,511,"output/run_info.%s",casename.c_str()) ;
    ofstream db_file(buf) ;
    if(!db_file.fail()) {
      using namespace Loci ;
      db_file << "case = " << av[1] << endl ;
      db_file << "Query = \"" << query << '"' << endl ;
      db_file << "facts = {" << endl ;
      variableSet ext_facts = facts.get_extensional_facts() ;
      for(variableSet::const_iterator vi=ext_facts.begin();
          vi!=ext_facts.end();++vi) {
        storeRepP sp = facts.get_variable(*vi) ;
        if(sp != 0) {
          if(sp->RepType() == PARAMETER) {
            db_file << *vi << ": " ;
            sp->Print(db_file) ;
          }
        }
      }
      db_file << "}" << endl ;
    }
  }

  // Create execution schedule that derives the variable named 'solution'
  // from the database of facts using the rule database rdb.
  bool testPassed = false ;
  if(!Loci::makeQuery(rdb,facts,query)) {
    cerr << "query failed!" << endl ;
  }
  if(facts.get_fact(query) != 0) {
    param<bool> val ;
    *val = testPassed ;
    val = facts.get_fact(query) ;
    testPassed = *val ;
  }
  Loci::Finalize() ;
  if(message.size()== 0)
    message = query ;
  
  if(testPassed) {
    cout << "TEST " << message << ": PASSED!" << endl ;
    return 0 ;
  }
  cout << "TEST " << message << ": FAILED!" << endl ;
  return -1 ;
}

