//#############################################################################
//#
//# Copyright 2015-2019, Mississippi State University
//#
//# This file is part of the flowPsi computational fluid dynamics solver.
//#
//# The flowPsi solver is free software: you can redistribute it and/or modify
//# it under the terms of the GNU General Public License as published by
//# the Free Software Foundation, either version 3 of the License, or
//# (at your option) any later version.
//#
//# The flowPsi solver is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# GNU General Public License for more details.
//#
//# You should have received a copy of the GNU General Public License
//# along with the flowPsi solver.  If not, see <http://www.gnu.org/licenses>
//#
//#############################################################################

#include <Loci.h>
#include "flowTypes.h"
$include "FVM.lh"

namespace flowPsi {

  vect3d directions[] = {
    { 1., 0., 0.},
    { 0., 1., 0.},
    { 0., 0., 1.},
    {-1., 0., 0.},
    { 0.,-1., 0.},
    { 0., 0.,-1.},
    { 1., 1., 1.},
    {-1.,-1.,-1.},
    { 1., 3.,-2.},
    {-1., 4.,-5.},
    {13.,17.,11.},
    {-3.,-7.,11.},
    {1.3,2.7,1.1},
    {-.1,-.5,0.2},
    {0.1,0.5,-.2},
    { 1., 1., 0.},
    { 1., 0., 1.},
    { 0., 1., 1.}
  } ;


  $type testS store<real> ;
  $type testV3d store<vect3d> ;
  $type testV storeVec<real> ;

  $type baseGradS param<vect3d> ;
  $type baseGradV3d param<tensor3d<real> > ;
  $type baseGradv param<vector<vect3d> > ;

  $type numTests param<int> ;
  $rule singleton(numTests),constraint(UNIVERSE) {
    $numTests = sizeof(directions)/sizeof(vect3d) ;
  }

  $type iterNum param<int> ;
  $rule singleton(iterNum{n=0}<-numTests) {
    $iterNum{n=0} = 0 ;
  }
  $rule singleton(iterNum{n+1}<-iterNum{n}) {
    $iterNum{n+1} = $iterNum{n}+1 ;
  }
  $rule singleton(baseGradS<-iterNum,numTests) {
    $baseGradS = directions[$iterNum%$numTests] ;
  }
  $rule singleton(baseGradV3d<-iterNum,numTests) {
    $baseGradV3d.x = directions[($iterNum+0)%$numTests] ;
    $baseGradV3d.y = directions[($iterNum+1)%$numTests] ;
    $baseGradV3d.z = directions[($iterNum+2)%$numTests] ;
  }

  $rule singleton(baseGradv<-iterNum,numTests) {
    int vsize = 5 ;

    vector<vect3d> tmp(vsize) ;
    for(int i=0;i<vsize;++i) {
      tmp[i] = directions[($iterNum+i)%$numTests] ;
    }
    $baseGradv.swap(tmp) ;
  }
  
  $type scalarVal store<real> ;
  $rule pointwise(scalarVal<-cellcenter,baseGradS) {
    $scalarVal = dot($cellcenter,$baseGradS) ;
  }

  $type scalarVal_f store<real> ;
  $rule pointwise(scalarVal_f<-facecenter,baseGradS) {
    $scalarVal_f = dot($facecenter,$baseGradS) ;
  }

  $type v3dVal store<vect3d> ;
  $rule pointwise(v3dVal<-cellcenter,baseGradV3d) {
    $v3dVal.x = dot($cellcenter,$baseGradV3d.x) ;
    $v3dVal.y = dot($cellcenter,$baseGradV3d.y) ;
    $v3dVal.z = dot($cellcenter,$baseGradV3d.z) ;
  }

  $type v3dVal_f store<vect3d> ;
  $rule pointwise(v3dVal_f<-facecenter,baseGradV3d) {
    $v3dVal_f.x = dot($facecenter,$baseGradV3d.x) ;
    $v3dVal_f.y = dot($facecenter,$baseGradV3d.y) ;
    $v3dVal_f.z = dot($facecenter,$baseGradV3d.z) ;
  }

  $type vectVal storeVec<real> ;
  $rule pointwise(vectVal<-cellcenter,baseGradv), prelude {
    $vectVal.setVecSize($baseGradv->size()) ;
  } compute {
    int sz = $baseGradv.size() ;
    for(int i=0;i<sz;++i)
      $vectVal[i] = dot($cellcenter,$baseGradv[i]) ;
  }

  $type vectVal_f storeVec<real> ;
  $rule pointwise(vectVal_f<-facecenter,baseGradv), prelude {
    $vectVal_f.setVecSize($baseGradv->size()) ;
  } compute {
    int sz = $baseGradv.size() ;
    for(int i=0;i<sz;++i)
      $vectVal_f[i] = dot($facecenter,$baseGradv[i]) ;
  }

  $type checkFinished param<bool> ;
  $rule singleton(checkFinished<-$n,numTests) {
    $checkFinished = $$n == $numTests ;
  }
  
  $type checkFunction(TEST,FUNC,VAR) param<bool> ;
  $rule singleton(checkFunction(TEST,FUNC,VAR)<-
                  checkFunction(TEST,FUNC,VAR){n}),
  parametric(checkFunction(TEST,FUNC,VAR)),
  conditional(checkFinished{n}) {
    $checkFunction(TEST,FUNC,VAR) = $checkFunction(TEST,FUNC,VAR){n} ;
  }

  $rule singleton(checkFunction(TEST,FUNC,VAR){n=0}),constraint(UNIVERSE),
  parametric(checkFunction(TEST,FUNC,VAR)) {
    $checkFunction(TEST,FUNC,VAR){n=0} = false ;
  }
  $type TEST(FUNC(VAR)) param<bool> ;
  $rule singleton(checkFunction(TEST,FUNC,VAR){n+1}<-
                  checkFunction(TEST,FUNC,VAR){n},TEST(FUNC(VAR)){n},$n{n}) {
    if($$n{n} > 0) 
      $checkFunction(TEST,FUNC,VAR){n+1} =
        $checkFunction(TEST,FUNC,VAR){n} && $TEST(FUNC(VAR)){n} ;
    else
      $checkFunction(TEST,FUNC,VAR){n+1} = $TEST(FUNC(VAR)){n} ;      
  }

  $type errScalarGrad(X) param<real> ;
  $rule unit(errScalarGrad(X)),constraint(UNIVERSE) {
    $errScalarGrad(X) = -1 ;
  }
  $type X store<vect3d> ;
  $rule apply(errScalarGrad(X)<-X,baseGradS)[Loci::Maximum] {
    vect3d diff = $X-$baseGradS ;
    join($errScalarGrad(X),dot(diff,diff)) ;
  }

  $type testScalarGrad(FUNC) param<bool> ;
  $rule singleton(testScalarGrad(FUNC)<-errScalarGrad(FUNC),baseGradS) {
    $testScalarGrad(FUNC) = ($errScalarGrad(FUNC)<1e-8) ;
    $[Once] {
      if(!$testScalarGrad(FUNC)) {
        std::cerr << "TEST FAILED, err=" << sqrt($errScalarGrad(FUNC))
                  << ", baseGradS=" << $baseGradS << std::endl ;
      }
    }
    if($errScalarGrad(FUNC) < 0) {
      $testScalarGrad(FUNC) = false ;
      $[Once] {
        std::cerr << "TEST FAILED, No Function Evaluated!" << std::endl ;
      }
    }
  }

  $type D store<real> ;
  $type errScalarUnity(D) param<real> ;
  $rule unit(errScalarUnity(D)),constraint(UNIVERSE) {
    $errScalarUnity(D) = -1 ;
  }
  $rule apply(errScalarUnity(D)<-D)[Loci::Maximum] {
    real diff = $D-1.0 ;
    join($errScalarUnity(D),diff*diff) ;
  }

  $type testScalarUnity(FUNC) param<bool> ;
  $rule singleton(testScalarUnity(FUNC)<-errScalarUnity(FUNC),baseGradS) {
    $testScalarUnity(FUNC) = ($errScalarUnity(FUNC)<1e-8) ;
    $[Once] {
      if(!$testScalarUnity(FUNC)) {
        std::cerr << "TEST FAILED, err=" << sqrt($errScalarUnity(FUNC))
                  << ", baseGradS=" << $baseGradS << std::endl ;
      }
    }
    if($errScalarUnity(FUNC) < 0) {
      $testScalarUnity(FUNC) = false ;
      $[Once] {
        std::cerr << "TEST FAILED, No Function Evaluated!" << std::endl ;
      }
    }
  }

  $type errv3dGrad(V) param<real> ;
  $rule unit(errv3dGrad(V)),constraint(UNIVERSE) {
    $errv3dGrad(V) = -1 ;
  }
  $type V store<tensor3d<real> > ;
  $rule apply(errv3dGrad(V)<-V,baseGradV3d)[Loci::Maximum] {
    vect3d diffx = $V.x-$baseGradV3d.x ;
    vect3d diffy = $V.y-$baseGradV3d.y ;
    vect3d diffz = $V.z-$baseGradV3d.z ;
    join($errv3dGrad(V),dot(diffx,diffx)) ;
    join($errv3dGrad(V),dot(diffy,diffy)) ;
    join($errv3dGrad(V),dot(diffz,diffz)) ;
  }
  
  $type testv3dGrad(FUNC) param<bool> ;
  $rule singleton(testv3dGrad(FUNC)<-errv3dGrad(FUNC),baseGradV3d) {
    $testv3dGrad(FUNC) = ($errv3dGrad(FUNC)<1e-8) ;
    $[Once] {
      if(!$testv3dGrad(FUNC)) {
        std::cerr << "TEST FAILED, err=" << sqrt($errv3dGrad(FUNC))
                  << ", baseGradV3d=" << $baseGradV3d << std::endl ;
      }
    }
    if($errv3dGrad(FUNC) < 0) {
      $testv3dGrad(FUNC) = false ;
      $[Once] {
        std::cerr << "TEST FAILED, No Function Evaluated!" << std::endl ;
      }
    }
  }

  $type errvGrad(M) param<real> ;
  $rule unit(errvGrad(M)),constraint(UNIVERSE) {
    $errvGrad(M) = -1 ;
  }
  $type M storeVec<vect3d> ;
  $rule apply(errvGrad(M)<-M,baseGradv)[Loci::Maximum] {
    int sz = $baseGradv.size() ;
    for(int i=0;i<sz;++i) {
      vect3d diff = $M[i]-$baseGradv[i] ;
      join($errvGrad(M),dot(diff,diff)) ;
    }
  }
  
  $type testvGrad(FUNC) param<bool> ;
  $rule singleton(testvGrad(FUNC)<-errvGrad(FUNC),baseGradv) {
    $testvGrad(FUNC) = ($errvGrad(FUNC)<1e-8) ;
    $[Once] {
      if(!$testvGrad(FUNC)) {
        std::cerr << "TEST FAILED, err=" << sqrt($errvGrad(FUNC))
                  << ", baseGradv=" << $baseGradv << std::endl ;
      }
    }
    if($errvGrad(FUNC) < 0) {
      $testvGrad(FUNC) = false ;
      $[Once] {
        std::cerr << "TEST FAILED, No Function Evaluated!" << std::endl ;
      }
    }
  }

  
  $type solution param<bool> ;

  //  $rule singleton(solution<-checkFunction(testScalarGrad,grads,scalarVal)) {
  //    $solution = $checkFunction(testScalarGrad,grads,scalarVal) ;
  //  }
}
    