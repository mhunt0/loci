//#############################################################################
//#
//# Copyright 2015-2019, Mississippi State University
//#
//# This file is part of the flowPsi computational fluid dynamics solver.
//#
//# The flowPsi solver is free software: you can redistribute it and/or modify
//# it under the terms of the GNU General Public License as published by
//# the Free Software Foundation, either version 3 of the License, or
//# (at your option) any later version.
//#
//# The flowPsi solver is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# GNU General Public License for more details.
//#
//# You should have received a copy of the GNU General Public License
//# along with the flowPsi solver.  If not, see <http://www.gnu.org/licenses>
//#
//#############################################################################

#include <Loci.h>
#include "readGrid.h"
#include "inviscidFlux.h"
$include "flowPsi.lh"

namespace flowPsi {

  class impermeable_check_noarg : public BC_Check {
  public:
    std::string boundaryConditions() { return "impermeable,symmetry,reflecting" ; }
    std::string variablesChecked() { return "" ; }
    bool checkOptions(const options_list& bc_options) { return true ; }
    std::ostream &ErrorMessage(std::ostream &s) { return s; }
  } ;
  register_BC<impermeable_check_noarg> register_BC_impermeable_check_noarg ;

  class impermeable_check : public BC_Check {
  public:
    std::string boundaryConditions() { return "impermeable,reflecting,viscousWall,wallLaw" ; }
    std::string variablesChecked() { return "firstOrder" ; }
    bool checkOptions(const options_list& bc_options) { return true ; }
    std::ostream &ErrorMessage(std::ostream &s) { return s; }
  } ;

  register_BC<impermeable_check> register_BC_impermeable_check ;

  $rule pointwise(u_f<-area,ci->u),constraint(symmetry_BC) {
    const real uit = dot($ci->$u,$area.n) ;
    $u_f = $ci->$u - uit*$area.n ;
  }

  $rule pointwise(gagePressure_f<-area,ci->(u,gagePressure,temperature),Pambient,Rtilde),
    constraint(symmetry_BC) {
    const real rho = ($ci->$gagePressure+$Pambient)/($Rtilde*$ci->$temperature) ;
    const real U = norm($ci->$u) ;
    const real uit = dot($ci->$u,$area.n) ;
    $gagePressure_f = $ci->$gagePressure + 0.5*rho*U*uit ;
  }
  
  $rule pointwise(temperature_f<-ci->temperature),constraint(symmetry_BC) {
    $temperature_f = $ci->$temperature ;
  }
  
  $rule pointwise(iflux<-gagePressure_f, u_f, area),constraint(symmetry_BC),
    prelude {
    $iflux.setVecSize(5) ;
  } compute {
    $iflux[0] = 0 ;
    const real moment = $gagePressure_f*$area.sada ;
    $iflux[1] = $area.n.x*moment ;
    $iflux[2] = $area.n.y*moment ;
    $iflux[3] = $area.n.z*moment ;
    $iflux[4] = $area.sada*$gagePressure_f*dot($u_f,$area.n) ;
  }
  
  $rule pointwise(u_f<-area,ci->u),constraint(reflecting_BC) {
    const real uit = dot($ci->$u,$area.n) ;
    $u_f = $ci->$u - uit*$area.n ;
  }

  $rule pointwise(gagePressure_f<-area,ci->(u,gagePressure,rho),Pambient),
    constraint(reflecting_BC) {
    const real uit = dot($ci->$u,$area.n) ;
    const real Pmin = 0.5*($ci->$gagePressure+$Pambient)-$Pambient ;
    $gagePressure_f = max(Pmin,$ci->$gagePressure + 0.5*($ci->$rho)*uit*fabs(uit)) ;
  }

  $rule pointwise(temperature_f<-ci->temperature),constraint(reflecting_BC) {
    $temperature_f = $ci->$temperature ;
  }
  
  $rule pointwise(iflux<-leftsP(gagePressure,minPg),leftsP(temperature,Zero),leftv3d(u), area,Pambient,Rtilde,gamma),constraint(reflecting_BC),
    prelude {
    $iflux.setVecSize(5) ;
  } compute {
    const real Tl = $leftsP(temperature,Zero) ;
    const real Pgl = $leftsP(gagePressure,minPg) ;
    const vect3d ul = $leftv3d(u) ;
    const real Tr = Tl ;
    const real Pgr = Pgl ;
    const real uit = dot(ul,$area.n) ;
    const vect3d ur = ul - 2.*uit*$area.n;
    inviscidRiemannFlux($iflux,Pgl,Tl,ul,Pgr,Tr,ur,$area.n,$area.sada,$Pambient,
			$Rtilde, $gamma) ;
    $iflux[0] = 0 ; // Mass flux should be zero for this BC
  }
}
