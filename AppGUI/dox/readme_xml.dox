/*!
\page page_readme_xml How to write XML file for FVMadapt

One model of program marker allows the user to define a region using an XML file;  and then all the grid elements inside this region will be refined recursively until a tolerance is met. 

The root element of the XML file is \a region. It's a complex type, its children can be the following XML elements: \a region, \a object and \a op. It describes the set operation on \a objects or \a regions. Therefore, the structure of \a region should make sense for set operation expression. For example, if \a op is binary, it should not appear as the first child of \a region; two binary  operators should not appear next to each other, etc. The recursive definition of \a region allow the priority of evaluation.
   
Example 1 for  \a region:
\code
 <region>
   <region>
    ...
   </region>
   <op>...</op>
   <object>
    ...
   </object>
 </region>
\endcode

Example 2 for  \a region:
\code
<region>
 <object>
 ...
 </object>
 <op>...</op>
 <region>
  ...
 </region>
 <op>...</op>
 <object>
  ...
 </object>
</region>
\endcode
Example 3 for  \a region:
\code
<region>
 <object>
  ...
 </object>
</region>
\endcode

Element  \a  op is a simple type; it defines the set  operations on \a objects and \a regions. The text of \a op can only be \a intersection, \a union, \a difference or \a complement. Here are some examples:

Example 1 for element \a op:
\code
<op>union</op>
\endcode
Example 2 for element \a op:
\code
<op>difference</op>
\endcode
Element  \a object is also a complex type; its children can be element \a transform followed by element \a shape or just an element \a shape. Here are examples for \a object:

Example 1 of \a object:
\code
<object>
 <transform>
 ...
 </transform>
 <shape>
 ...
 </shape>
</object>
\endcode
Example 2 for \a object:
\code
<object>
 <shape>
 ...
 </shape>
</object>
\endcode

Element  \a transform is a complex type; it defines the transformation performed on the \a shape.  Its children can be the following elements: \a translate, \a scale, \a rotateX, \a rotateY, \a rotateZ. Each child element type can appear one or more times, and the children can appear in any order. Here are examples for \a transform:

Example 1 for \a transform:
\code
<transform>
 <translate>
 ...
 </translate>
 <scale>
 ...
 </scale>
</transform>
\endcode

Example 2 for \a transform:
\code
<transform>
 <rotateX>
 ...
 <rotateX>
</transform>
\endcode

Elements \a translate, scale, \a rotateX, \a rotateY, \a rotateZ are complex types. Their children elements can by \a x0, \a y0, and \a z0, to define a vector in 3d space; or element \a theta to define an angle in degree for rotation.  Elements \a x0, \a y0 and \a z0 and \a theta are simple types; their values are restricted to decimal type. Here are some examples:

Example 1 for \a translate:
\code
<translate>
 <x0>10.0</x0>
 <y0>-2.0</y0>
 <z0>20.0</z0>
</translate>
\endcode

If one of the children is missing, the default value for it is 0

Example 2 for \a translate:
\code
<translate>
 <y0>-2.0</y0>
</translate>
\endcode

Example 1 for \a scale:

\code
<scale>
 <x0>2.0</x0>
 <y0>2.0</y0>
</scale>
\endcode

The default value for the children of scale is 1.

Example 1 for \a rotateX:
\code
<rotateX>
 <theta>75.0</theta>
</rotateX>
\endcode

Element \a shape is a complex type; its children can only  be one of the following: \code sphere, cone, cylinder, box, x_plus_plane, x_minus_plane, y_plus_plane, y_minus_plane, z_plus_plane,and  z_minus_plane. \endcode

Example 1 of \a shape:
\code
<shape>
 <sphere>
 ...
 </sphere>
</shape>
\endcode

The children of \a shape are paratype. A paratype is a complex type, it's used to specify a set of parameters. The parameters include the center of \a shape: (x0,y0, z0), of which the default value is  (0, 0, 0); the radius \a r, whose default value is 1. The bounding box:  (x1, y1, z1) and  (x1, y2, z2). The default value for  (x1, y1, z1) is  (0, 0, 0), and the default value for (x2, y2, z2) is  (1, 1, 1).
 
Element \a sphere specify a sphere of radius r with origin at (x0, y0, z0). The implicit equation for sphere is:\code (x-x0)*(x-x0)+(y-y0)*(y-y0)+(z-z0)*(z-z0)<=r*r.\endcode

Example 1 for \a sphere:
\code
<sphere>
 <x0>10.0</x0>
 <y0>2.0</y0>
 <z0>3.0</z0>
 <r>5.0</r>
</sphere>
\endcode

Example 2 for \a sphere:
\code
<sphere>
</sphere>
\endcode

The definition for \a cone is:\code
 (x-x0)*(x-x0) + (y-y0)*(y-y0) <=r*r* (z-z0)*(z-z0); z>=z1; z <=z2\endcode
Example 1 for \a cone:
\code
<cone>
 <x0>0.0</x0>
 <y0>1.0</y0>
 <z0>2.0</z0>
 <r> 3.0</r>
 <z1>2.0</z1>
 <z2>5.0</z2>
</cone>
\endcode

Example 2 for \a cone:
\code
<cone>
 <z1>-20.0</z1>
 <z2>20.0</z2>
</cone>
\endcode

The definition for \a cylinder is: \code(x-x0)*(x-x0) +(y-y0)*(y-y0) <= r*r; z>=z1; z<=z2\endcode

Example 1 for \a cylinder:

\code
<cylinder>
 <x0>0.0</x0>
 <y0>1.0</y0>
 <r> 3.0</r>
 <z1>2.0</z1> 
 <z2>5.0</z2>
</cylinder>
\endcode
Example 2 for \a cylinder:
\code
<cylinder>
 <r>5.0</r>
 <z1>-20.0</z1>
 <z2>20.0</z2>
</cylinder>
\endcode
 
The definition for \a box is: \code x >= x1 && x <=x2 && y > y1 && y <=y2 && z> z1 && z <=z2\endcode

Example 1 for \a box:
\code
<box>
 <x1>-1.0</x1>
 <x2> 3.0</x2>
 <y1>-2.0</y1>
 <y2>2.0</y2>
 <z1>-2.0</z1>
 <z2>5.0</z2>
</box>
\endcode

Example 2 for \a box:
\code
<box>
 <z1>-20.0</z1>
 <z2>20.0</z2>
</box>
\endcode

The definition for \a x_plus_plane is: \code x >=x1\endcode The default value for \a x1 is 0

Example 1 for \a x_plus_plane:
\code
<x_plus_plane>
 <x1>1.0</x1>
</x_plus_plane>
\endcode
Example 2 for \a x_plus_plane:
\code
<x_plus_plane>
</x_plus_plane>
\endcode
The definition for \a x_minus_plane is: \code x <=x1 \endcode The default value for \a x1 is 0

Example 1 for \a x_minus_plane:
\code
<x_minus_plane>
 <x1>1.0</x1>
</x_minus_plane>
\endcode

Example 2 for \a x_minus_plane:
\code
<x_minus_plane>
</x_minus_plane>
\endcode
\a y_plus_plane, \a y_minus_plane, \a z_plus_plane, \a z_minus_plane are defined in the same way.

*/









 


